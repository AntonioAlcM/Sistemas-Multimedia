/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practicaFinal;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.ShortLookupTable;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.imageio.ImageIO;
import javax.media.Buffer;
import javax.media.Player;
import javax.media.control.FrameGrabbingControl;
import javax.media.format.VideoFormat;
import javax.media.util.BufferToImage;
import javax.sound.sampled.AudioFileFormat;
import javax.sound.sampled.AudioSystem;
import javax.swing.Icon;
import javax.swing.JColorChooser;
import javax.swing.JDesktopPane;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.AAM.graficos.Atributo;
import sm.AAM.graficos.RellenoSimple;
import sm.AAM.imagen.CosraiOp;
import sm.AAM.imagen.SepiaOp;
import sm.AAM.imagen.SobelOp;
import sm.AAM.imagen.UmbralizacionOp;
import sm.image.BlendOp;
import sm.image.Histogram;
import sm.image.SubtractionOp;
import sm.sound.SMPlayer;
import sm.sound.SMSoundRecorder;

/**
 * Esta clase define un objeto de tipo Paint
 *
 * @author Antonio
 */
public class Paint extends javax.swing.JFrame {

    private final String punto = "Punto";
    private final String linea = "Linea";
    private final String rectangulo = "Rectangulo";
    private final String rectanguloRedondeado = "RectanguloRedondeado";
    private final String elipse = "Elipse";
    private final String curva = "Curva";
    private final String poligono = "Poligono";
    private final String poligonoAbiero = "PoligonoAbierto";
    private final String trazoLibre = "TrazoLibre";
    private VentanaInterna ventanaInterna;
    private BufferedImage imgSource;
    private BufferedImage imgRight;
    private BufferedImage imgLeft;
    private BufferedImage imgdest;
    private VentanaInternaImagen ventanaMezcla;
    private Color[] colores;
    private Icon[] trazos;
    private int alto = 300;
    private int ancho = 300;
    private SMSoundRecorder SMRecorder;
    private File grabar;
    private SMPlayer player = null;
    private boolean estoy_grabando = false;
    private Thread hilo = null;

    /**
     * Creates new form PaintBasico
     */
    public Paint() {
        initComponents();
        colores = new Color[]{Color.BLACK, Color.RED, Color.BLUE, Color.WHITE, Color.YELLOW, Color.GREEN};
        jPanelValorGris.setVisible(false);
        jPanelValorRGB.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        barraFormasDibujo = new javax.swing.ButtonGroup();
        grupoColores = new javax.swing.ButtonGroup();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        BotonesReproduccion = new javax.swing.ButtonGroup();
        jBarraArriba = new javax.swing.JPanel();
        jBarraArchivo = new javax.swing.JToolBar();
        jNuevo = new javax.swing.JButton();
        jAbrir = new javax.swing.JButton();
        jGuardar = new javax.swing.JButton();
        jBotonCapturar = new javax.swing.JButton();
        jBarraFormas = new javax.swing.JToolBar();
        jPunto = new javax.swing.JToggleButton();
        jLinea = new javax.swing.JToggleButton();
        jRectangulo = new javax.swing.JToggleButton();
        jRoundRectangle = new javax.swing.JToggleButton();
        jOvalo = new javax.swing.JToggleButton();
        jCurva = new javax.swing.JToggleButton();
        jPoligono = new javax.swing.JToggleButton();
        jPoligonoAbierto = new javax.swing.JToggleButton();
        jTrazoLibre = new javax.swing.JToggleButton();
        jEditar = new javax.swing.JToggleButton();
        jBarraColores = new javax.swing.JToolBar();
        trazos=new Icon[]{new javax.swing.ImageIcon(getClass().getResource("/iconos/line.png")),new javax.swing.ImageIcon(getClass().getResource("/iconos/dashed-line.png"))};
        jMenuTrazo = new javax.swing.JComboBox(trazos);
        jPanel2 = new javax.swing.JPanel();
        colores=new Color[]{Color.BLACK, Color.RED, Color.BLUE, Color.WHITE, Color.YELLOW, Color.GREEN, Color.CYAN, Color.DARK_GRAY, Color.GRAY, Color.LIGHT_GRAY, Color.MAGENTA, Color.ORANGE, Color.PINK};
        jMenuColores = new javax.swing.JComboBox(colores);
        jPanelColores = new javax.swing.JButton();
        jBarraAtributos = new javax.swing.JToolBar();
        jGrosor = new javax.swing.JSpinner();
        jRellenar = new javax.swing.JButton();
        jRellenoDegradados = new javax.swing.JButton();
        jBorrarRelleno = new javax.swing.JButton();
        jTransparencia = new javax.swing.JButton();
        jAlisar = new javax.swing.JToggleButton();
        jToolBar1 = new javax.swing.JToolBar();
        jPlayAudio = new javax.swing.JToggleButton();
        jStopAudio = new javax.swing.JToggleButton();
        jGrabarAudio = new javax.swing.JToggleButton();
        jCronometroGrabacion = new javax.swing.JLabel();
        jEscritorio = new javax.swing.JDesktopPane();
        jPanel4 = new javax.swing.JPanel();
        jBarraEstado = new javax.swing.JLabel();
        jLabeCoordenadaX = new javax.swing.JLabel();
        jLabeCoordenadaY = new javax.swing.JLabel();
        jPanelValorRGB = new javax.swing.JPanel();
        jValorRojo = new javax.swing.JLabel();
        jValorVerde = new javax.swing.JLabel();
        jValorAzul = new javax.swing.JLabel();
        jPanelValorGris = new javax.swing.JPanel();
        jValorGris = new javax.swing.JLabel();
        jPanelHerrmientas = new javax.swing.JPanel();
        jBarraAtributo = new javax.swing.JToolBar();
        jPanelBrillo = new javax.swing.JPanel();
        jBrillo = new javax.swing.JSlider();
        jPanelFiltro = new javax.swing.JPanel();
        jFiltros = new javax.swing.JComboBox();
        jPanelContraste = new javax.swing.JPanel();
        jContraste = new javax.swing.JButton();
        jIluminar = new javax.swing.JButton();
        jOscurecer = new javax.swing.JButton();
        jPanelOperaciones = new javax.swing.JPanel();
        jSinusoidal = new javax.swing.JButton();
        jSepia = new javax.swing.JButton();
        jTransNivGrises = new javax.swing.JButton();
        jMiFucnion = new javax.swing.JButton();
        jHistograma = new javax.swing.JButton();
        jTintado = new javax.swing.JButton();
        jSobel = new javax.swing.JButton();
        jNegativo1 = new javax.swing.JButton();
        jPanelRotacion = new javax.swing.JPanel();
        jRotación = new javax.swing.JSlider();
        jRot90 = new javax.swing.JButton();
        jRo180 = new javax.swing.JButton();
        jRo270 = new javax.swing.JButton();
        jPanelEscala = new javax.swing.JPanel();
        jEscAumentar = new javax.swing.JButton();
        jEscDisminuir = new javax.swing.JButton();
        jPanelBinarias = new javax.swing.JPanel();
        jBinariSumar = new javax.swing.JButton();
        jBinariRestar = new javax.swing.JButton();
        jMezclaImagenes = new javax.swing.JSlider();
        jPanelUmbralizacion = new javax.swing.JPanel();
        jUmbralizacion = new javax.swing.JSlider();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuArchivo = new javax.swing.JMenu();
        jArchivoNuevo = new javax.swing.JMenuItem();
        jArchivoAbrirMenu = new javax.swing.JMenuItem();
        jArchivoGuardarMenu = new javax.swing.JMenuItem();
        jActivarCamara = new javax.swing.JMenuItem();
        jCapturar = new javax.swing.JMenuItem();
        jMenuEdición = new javax.swing.JMenu();
        jEdiVerBarraEstado = new javax.swing.JCheckBoxMenuItem();
        jVerBarraFormas = new javax.swing.JCheckBoxMenuItem();
        jVerBarraAtributos = new javax.swing.JCheckBoxMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jRedimensionar = new javax.swing.JMenuItem();
        jNegativo = new javax.swing.JMenuItem();
        jDuplicar = new javax.swing.JMenuItem();

        FormListener formListener = new FormListener();

        jMenuItem2.setText("jMenuItem2");

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(300, 300));
        setPreferredSize(new java.awt.Dimension(960, 718));
        getContentPane().setLayout(new java.awt.BorderLayout(4, 0));

        jBarraArriba.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jBarraArriba.setMaximumSize(new java.awt.Dimension(200, 200));
        jBarraArriba.setMinimumSize(new java.awt.Dimension(200, 200));
        jBarraArriba.setPreferredSize(new java.awt.Dimension(140, 80));
        jBarraArriba.setRequestFocusEnabled(false);
        jBarraArriba.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 1, 1));

        jBarraArchivo.setRollover(true);
        jBarraArchivo.setMaximumSize(new java.awt.Dimension(120, 38));
        jBarraArchivo.setMinimumSize(new java.awt.Dimension(80, 38));
        jBarraArchivo.setOpaque(false);
        jBarraArchivo.setPreferredSize(new java.awt.Dimension(140, 38));

        jNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        jNuevo.setToolTipText("Nuevo");
        jNuevo.setFocusable(false);
        jNuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jNuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jNuevo.addActionListener(formListener);
        jBarraArchivo.add(jNuevo);

        jAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        jAbrir.setToolTipText("Abrir");
        jAbrir.setFocusable(false);
        jAbrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jAbrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jAbrir.addActionListener(formListener);
        jBarraArchivo.add(jAbrir);

        jGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Guardar.gif"))); // NOI18N
        jGuardar.setToolTipText("Guardar");
        jGuardar.setFocusable(false);
        jGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jGuardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jGuardar.addActionListener(formListener);
        jBarraArchivo.add(jGuardar);

        jBotonCapturar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Camara.png"))); // NOI18N
        jBotonCapturar.setToolTipText("Capturar");
        jBotonCapturar.setFocusable(false);
        jBotonCapturar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBotonCapturar.setMaximumSize(new java.awt.Dimension(27, 27));
        jBotonCapturar.setMinimumSize(new java.awt.Dimension(27, 27));
        jBotonCapturar.setPreferredSize(new java.awt.Dimension(27, 27));
        jBotonCapturar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBotonCapturar.addActionListener(formListener);
        jBarraArchivo.add(jBotonCapturar);

        jBarraArriba.add(jBarraArchivo);

        jBarraFormas.setBorder(null);
        jBarraFormas.setRollover(true);
        jBarraFormas.setMaximumSize(new java.awt.Dimension(350, 38));
        jBarraFormas.setMinimumSize(new java.awt.Dimension(80, 38));
        jBarraFormas.setOpaque(false);
        jBarraFormas.setPreferredSize(new java.awt.Dimension(325, 38));

        barraFormasDibujo.add(jPunto);
        jPunto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/punto.png"))); // NOI18N
        jPunto.setToolTipText("Punto");
        jPunto.setFocusable(false);
        jPunto.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPunto.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jPunto.addActionListener(formListener);
        jBarraFormas.add(jPunto);

        barraFormasDibujo.add(jLinea);
        jLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/linea.png"))); // NOI18N
        jLinea.setToolTipText("Línea");
        jLinea.setFocusable(false);
        jLinea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLinea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jLinea.addActionListener(formListener);
        jBarraFormas.add(jLinea);

        barraFormasDibujo.add(jRectangulo);
        jRectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        jRectangulo.setToolTipText("Rectángulo");
        jRectangulo.setFocusable(false);
        jRectangulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jRectangulo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jRectangulo.addActionListener(formListener);
        jBarraFormas.add(jRectangulo);

        barraFormasDibujo.add(jRoundRectangle);
        jRoundRectangle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/RoundRectangle.png"))); // NOI18N
        jRoundRectangle.setFocusable(false);
        jRoundRectangle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jRoundRectangle.setMaximumSize(new java.awt.Dimension(31, 31));
        jRoundRectangle.setMinimumSize(new java.awt.Dimension(31, 31));
        jRoundRectangle.setPreferredSize(new java.awt.Dimension(31, 31));
        jRoundRectangle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jRoundRectangle.addActionListener(formListener);
        jBarraFormas.add(jRoundRectangle);

        barraFormasDibujo.add(jOvalo);
        jOvalo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/elipse.png"))); // NOI18N
        jOvalo.setToolTipText("Elipse");
        jOvalo.setFocusable(false);
        jOvalo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jOvalo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jOvalo.addActionListener(formListener);
        jBarraFormas.add(jOvalo);

        barraFormasDibujo.add(jCurva);
        jCurva.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/curved.png"))); // NOI18N
        jCurva.setToolTipText("Curva");
        jCurva.setFocusable(false);
        jCurva.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jCurva.setMaximumSize(new java.awt.Dimension(31, 31));
        jCurva.setMinimumSize(new java.awt.Dimension(31, 31));
        jCurva.setPreferredSize(new java.awt.Dimension(31, 31));
        jCurva.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jCurva.addActionListener(formListener);
        jBarraFormas.add(jCurva);

        barraFormasDibujo.add(jPoligono);
        jPoligono.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/polygon.png"))); // NOI18N
        jPoligono.setToolTipText("Polígono");
        jPoligono.setFocusable(false);
        jPoligono.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPoligono.setMaximumSize(new java.awt.Dimension(31, 31));
        jPoligono.setMinimumSize(new java.awt.Dimension(31, 31));
        jPoligono.setPreferredSize(new java.awt.Dimension(31, 31));
        jPoligono.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jPoligono.addActionListener(formListener);
        jBarraFormas.add(jPoligono);

        barraFormasDibujo.add(jPoligonoAbierto);
        jPoligonoAbierto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/PoligonoAbierto.png"))); // NOI18N
        jPoligonoAbierto.setToolTipText("Polígono abierto");
        jPoligonoAbierto.setFocusable(false);
        jPoligonoAbierto.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPoligonoAbierto.setMaximumSize(new java.awt.Dimension(31, 31));
        jPoligonoAbierto.setMinimumSize(new java.awt.Dimension(31, 31));
        jPoligonoAbierto.setPreferredSize(new java.awt.Dimension(31, 31));
        jPoligonoAbierto.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jPoligonoAbierto.addActionListener(formListener);
        jBarraFormas.add(jPoligonoAbierto);

        barraFormasDibujo.add(jTrazoLibre);
        jTrazoLibre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/TrazoLibre (2).png"))); // NOI18N
        jTrazoLibre.setToolTipText("Trazo libre");
        jTrazoLibre.setFocusable(false);
        jTrazoLibre.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jTrazoLibre.setMaximumSize(new java.awt.Dimension(31, 31));
        jTrazoLibre.setMinimumSize(new java.awt.Dimension(31, 31));
        jTrazoLibre.setPreferredSize(new java.awt.Dimension(31, 31));
        jTrazoLibre.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jTrazoLibre.addActionListener(formListener);
        jBarraFormas.add(jTrazoLibre);

        jEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/seleccion.png"))); // NOI18N
        jEditar.setToolTipText("Editar");
        jEditar.setFocusable(false);
        jEditar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jEditar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jEditar.addActionListener(formListener);
        jBarraFormas.add(jEditar);

        jBarraArriba.add(jBarraFormas);

        jBarraColores.setRollover(true);
        jBarraColores.setMaximumSize(new java.awt.Dimension(80, 38));
        jBarraColores.setMinimumSize(new java.awt.Dimension(80, 38));
        jBarraColores.setPreferredSize(new java.awt.Dimension(180, 38));

        jMenuTrazo.setMaximumRowCount(6);
        jMenuTrazo.setToolTipText("Tipo de trazos");
        jMenuTrazo.setMaximumSize(new java.awt.Dimension(70, 40));
        jMenuTrazo.setMinimumSize(new java.awt.Dimension(70, 40));
        jMenuTrazo.setPreferredSize(new java.awt.Dimension(60, 40));
        jMenuTrazo.setRenderer(new sm.AAM.iu.Iconos());
        jMenuTrazo.addActionListener(formListener);
        jBarraColores.add(jMenuTrazo);
        jBarraColores.add(jPanel2);

        jMenuColores.setMaximumRowCount(6);
        jMenuColores.setSelectedItem(grupoColores);
        jMenuColores.setToolTipText("Color");
        jMenuColores.setMaximumSize(new java.awt.Dimension(60, 40));
        jMenuColores.setMinimumSize(new java.awt.Dimension(60, 40));
        jMenuColores.setPreferredSize(new java.awt.Dimension(60, 40));
        jMenuColores.setRenderer(new sm.AAM.iu.IconoColor());
        jMenuColores.addActionListener(formListener);
        jBarraColores.add(jMenuColores);

        jPanelColores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/emblem_art2 .png"))); // NOI18N
        jPanelColores.setToolTipText("Paleta de colores");
        jPanelColores.setFocusable(false);
        jPanelColores.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanelColores.setMaximumSize(new java.awt.Dimension(31, 33));
        jPanelColores.setMinimumSize(new java.awt.Dimension(31, 33));
        jPanelColores.setPreferredSize(new java.awt.Dimension(31, 33));
        jPanelColores.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jPanelColores.addActionListener(formListener);
        jBarraColores.add(jPanelColores);

        jBarraArriba.add(jBarraColores);

        jBarraAtributos.setRollover(true);
        jBarraAtributos.setToolTipText("");
        jBarraAtributos.setMaximumSize(new java.awt.Dimension(241, 38));
        jBarraAtributos.setMinimumSize(new java.awt.Dimension(241, 38));
        jBarraAtributos.setPreferredSize(new java.awt.Dimension(241, 38));

        jGrosor.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        jGrosor.setToolTipText("Grosor");
        jGrosor.setMaximumSize(new java.awt.Dimension(70, 38));
        jGrosor.setMinimumSize(new java.awt.Dimension(70, 38));
        jGrosor.setPreferredSize(new java.awt.Dimension(70, 38));
        jGrosor.addChangeListener(formListener);
        jBarraAtributos.add(jGrosor);

        jRellenar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Colores.png"))); // NOI18N
        jRellenar.setToolTipText("Relleno simple");
        jRellenar.setMaximumSize(new java.awt.Dimension(31, 33));
        jRellenar.setMinimumSize(new java.awt.Dimension(31, 33));
        jRellenar.setPreferredSize(new java.awt.Dimension(31, 33));
        jRellenar.addActionListener(formListener);
        jBarraAtributos.add(jRellenar);

        jRellenoDegradados.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/gradient.png"))); // NOI18N
        jRellenoDegradados.setToolTipText("Rellenos degradados");
        jRellenoDegradados.setFocusable(false);
        jRellenoDegradados.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jRellenoDegradados.setMaximumSize(new java.awt.Dimension(31, 33));
        jRellenoDegradados.setMinimumSize(new java.awt.Dimension(31, 33));
        jRellenoDegradados.setPreferredSize(new java.awt.Dimension(31, 33));
        jRellenoDegradados.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jRellenoDegradados.addActionListener(formListener);
        jBarraAtributos.add(jRellenoDegradados);

        jBorrarRelleno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/fill_delete .png"))); // NOI18N
        jBorrarRelleno.setToolTipText("Quitar relleno");
        jBorrarRelleno.setFocusable(false);
        jBorrarRelleno.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBorrarRelleno.setMaximumSize(new java.awt.Dimension(31, 33));
        jBorrarRelleno.setMinimumSize(new java.awt.Dimension(31, 33));
        jBorrarRelleno.setPreferredSize(new java.awt.Dimension(31, 33));
        jBorrarRelleno.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBorrarRelleno.addActionListener(formListener);
        jBarraAtributos.add(jBorrarRelleno);

        jTransparencia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/transparencia.png"))); // NOI18N
        jTransparencia.setToolTipText("Transparencia");
        jTransparencia.setFocusable(false);
        jTransparencia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jTransparencia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jTransparencia.addActionListener(formListener);
        jBarraAtributos.add(jTransparencia);

        jAlisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alisar.png"))); // NOI18N
        jAlisar.setToolTipText("Alisar");
        jAlisar.setFocusable(false);
        jAlisar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jAlisar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jAlisar.addActionListener(formListener);
        jBarraAtributos.add(jAlisar);

        jBarraArriba.add(jBarraAtributos);

        jToolBar1.setRollover(true);
        jToolBar1.setMaximumSize(new java.awt.Dimension(180, 38));
        jToolBar1.setMinimumSize(new java.awt.Dimension(100, 38));
        jToolBar1.setPreferredSize(new java.awt.Dimension(180, 31));

        BotonesReproduccion.add(jPlayAudio);
        jPlayAudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iconosAudio/Play1Normal24x24.png"))); // NOI18N
        jPlayAudio.setToolTipText("Play");
        jPlayAudio.setFocusable(false);
        jPlayAudio.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPlayAudio.setMaximumSize(new java.awt.Dimension(31, 31));
        jPlayAudio.setMinimumSize(new java.awt.Dimension(31, 31));
        jPlayAudio.setOpaque(true);
        jPlayAudio.setPreferredSize(new java.awt.Dimension(31, 31));
        jPlayAudio.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iconosAudio/PlayDisabled24x24.png"))); // NOI18N
        jPlayAudio.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jPlayAudio.addActionListener(formListener);
        jToolBar1.add(jPlayAudio);

        BotonesReproduccion.add(jStopAudio);
        jStopAudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iconosAudio/Stop1NormalRed24x24.png"))); // NOI18N
        jStopAudio.setSelected(true);
        jStopAudio.setToolTipText("Stop");
        jStopAudio.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jStopAudio.setFocusable(false);
        jStopAudio.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jStopAudio.setMaximumSize(new java.awt.Dimension(31, 31));
        jStopAudio.setMinimumSize(new java.awt.Dimension(31, 31));
        jStopAudio.setPreferredSize(new java.awt.Dimension(31, 31));
        jStopAudio.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iconosAudio/Stop1Disabled24x24.png"))); // NOI18N
        jStopAudio.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jStopAudio.addActionListener(formListener);
        jToolBar1.add(jStopAudio);

        BotonesReproduccion.add(jGrabarAudio);
        jGrabarAudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iconosAudio/record24x24.png"))); // NOI18N
        jGrabarAudio.setToolTipText("Record");
        jGrabarAudio.setFocusable(false);
        jGrabarAudio.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jGrabarAudio.setMaximumSize(new java.awt.Dimension(31, 31));
        jGrabarAudio.setMinimumSize(new java.awt.Dimension(31, 31));
        jGrabarAudio.setPreferredSize(new java.awt.Dimension(31, 31));
        jGrabarAudio.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iconosAudio/RecordDisabled24x24.png"))); // NOI18N
        jGrabarAudio.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jGrabarAudio.addActionListener(formListener);
        jToolBar1.add(jGrabarAudio);

        jCronometroGrabacion.setMaximumSize(new java.awt.Dimension(80, 31));
        jCronometroGrabacion.setMinimumSize(new java.awt.Dimension(80, 31));
        jCronometroGrabacion.setPreferredSize(new java.awt.Dimension(80, 31));
        jToolBar1.add(jCronometroGrabacion);

        jBarraArriba.add(jToolBar1);

        getContentPane().add(jBarraArriba, java.awt.BorderLayout.PAGE_START);

        jEscritorio.setBackground(new java.awt.Color(255, 255, 255));
        jEscritorio.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jEscritorio.setDesktopManager(null);
        jEscritorio.setPreferredSize(new java.awt.Dimension(703, 400));
        jEscritorio.setSelectedFrame(jEscritorio.getSelectedFrame());
        getContentPane().add(jEscritorio, java.awt.BorderLayout.CENTER);
        jEscritorio.getAccessibleContext().setAccessibleName("");

        jPanel4.setMinimumSize(new java.awt.Dimension(804, 35));
        jPanel4.setPreferredSize(new java.awt.Dimension(754, 38));
        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 1, 1));

        jBarraEstado.setText("Barra de estado");
        jBarraEstado.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), ".", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP, null, new java.awt.Color(218, 218, 218)));
        jBarraEstado.setMaximumSize(new java.awt.Dimension(304, 20));
        jBarraEstado.setMinimumSize(new java.awt.Dimension(380, 20));
        jBarraEstado.setPreferredSize(new java.awt.Dimension(650, 35));
        jPanel4.add(jBarraEstado);

        jLabeCoordenadaX.setToolTipText("Coordenadas");
        jLabeCoordenadaX.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "X", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));
        jLabeCoordenadaX.setMaximumSize(new java.awt.Dimension(40, 35));
        jLabeCoordenadaX.setMinimumSize(new java.awt.Dimension(34, 20));
        jLabeCoordenadaX.setPreferredSize(new java.awt.Dimension(40, 35));
        jPanel4.add(jLabeCoordenadaX);

        jLabeCoordenadaY.setToolTipText("Coordenadas");
        jLabeCoordenadaY.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Y", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));
        jLabeCoordenadaY.setMaximumSize(new java.awt.Dimension(40, 20));
        jLabeCoordenadaY.setMinimumSize(new java.awt.Dimension(40, 20));
        jLabeCoordenadaY.setPreferredSize(new java.awt.Dimension(40, 35));
        jPanel4.add(jLabeCoordenadaY);

        jPanelValorRGB.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 1, 1));

        jValorRojo.setToolTipText("Valor RGB");
        jValorRojo.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Rojo", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));
        jValorRojo.setMaximumSize(new java.awt.Dimension(40, 35));
        jValorRojo.setMinimumSize(new java.awt.Dimension(40, 35));
        jValorRojo.setPreferredSize(new java.awt.Dimension(45, 35));
        jPanelValorRGB.add(jValorRojo);

        jValorVerde.setToolTipText("Valor RGB");
        jValorVerde.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Verde", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));
        jValorVerde.setMaximumSize(new java.awt.Dimension(45, 35));
        jValorVerde.setMinimumSize(new java.awt.Dimension(49, 35));
        jValorVerde.setPreferredSize(new java.awt.Dimension(49, 35));
        jPanelValorRGB.add(jValorVerde);

        jValorAzul.setToolTipText("Valor RGB");
        jValorAzul.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Azul", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));
        jValorAzul.setMaximumSize(new java.awt.Dimension(40, 35));
        jValorAzul.setMinimumSize(new java.awt.Dimension(40, 35));
        jValorAzul.setPreferredSize(new java.awt.Dimension(45, 35));
        jPanelValorRGB.add(jValorAzul);

        jPanel4.add(jPanelValorRGB);

        jPanelValorGris.setPreferredSize(new java.awt.Dimension(50, 37));
        jPanelValorGris.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 1, 1));

        jValorGris.setToolTipText("Valor en grís");
        jValorGris.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Gris", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));
        jValorGris.setMaximumSize(new java.awt.Dimension(40, 35));
        jValorGris.setMinimumSize(new java.awt.Dimension(40, 35));
        jValorGris.setPreferredSize(new java.awt.Dimension(45, 35));
        jPanelValorGris.add(jValorGris);

        jPanel4.add(jPanelValorGris);

        getContentPane().add(jPanel4, java.awt.BorderLayout.SOUTH);

        jPanelHerrmientas.setPreferredSize(new java.awt.Dimension(153, 165));
        jPanelHerrmientas.setLayout(new java.awt.GridLayout(1, 1));

        jBarraAtributo.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jBarraAtributo.setRollover(true);
        jBarraAtributo.setMaximumSize(new java.awt.Dimension(153, 275));
        jBarraAtributo.setMinimumSize(new java.awt.Dimension(153, 205));
        jBarraAtributo.setName(""); // NOI18N
        jBarraAtributo.setPreferredSize(new java.awt.Dimension(193, 285));

        jPanelBrillo.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Brillo", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));
        jPanelBrillo.setMaximumSize(new java.awt.Dimension(120, 60));
        jPanelBrillo.setMinimumSize(new java.awt.Dimension(120, 60));
        jPanelBrillo.setPreferredSize(new java.awt.Dimension(120, 60));
        jPanelBrillo.setLayout(new java.awt.GridBagLayout());

        jBrillo.setMaximum(255);
        jBrillo.setMinimum(-255);
        jBrillo.setToolTipText("Brillo");
        jBrillo.setValue(0);
        jBrillo.setMaximumSize(new java.awt.Dimension(80, 30));
        jBrillo.setMinimumSize(new java.awt.Dimension(36, 30));
        jBrillo.setPreferredSize(new java.awt.Dimension(100, 30));
        jBrillo.addChangeListener(formListener);
        jBrillo.addFocusListener(formListener);
        jPanelBrillo.add(jBrillo, new java.awt.GridBagConstraints());

        jBarraAtributo.add(jPanelBrillo);

        jPanelFiltro.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Filtro", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));
        jPanelFiltro.setMaximumSize(new java.awt.Dimension(85, 60));
        jPanelFiltro.setMinimumSize(new java.awt.Dimension(85, 60));
        jPanelFiltro.setPreferredSize(new java.awt.Dimension(85, 60));
        jPanelFiltro.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jFiltros.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Laplaciano", " " }));
        jFiltros.setToolTipText("Filtro");
        jFiltros.setMaximumSize(new java.awt.Dimension(65, 20));
        jFiltros.setPreferredSize(new java.awt.Dimension(65, 20));
        jFiltros.addActionListener(formListener);
        jPanelFiltro.add(jFiltros);

        jBarraAtributo.add(jPanelFiltro);

        jPanelContraste.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Contraste", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));
        jPanelContraste.setMaximumSize(new java.awt.Dimension(105, 60));
        jPanelContraste.setMinimumSize(new java.awt.Dimension(105, 60));
        jPanelContraste.setPreferredSize(new java.awt.Dimension(105, 60));
        jPanelContraste.setLayout(new javax.swing.BoxLayout(jPanelContraste, javax.swing.BoxLayout.LINE_AXIS));

        jContraste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/contraste.png"))); // NOI18N
        jContraste.setToolTipText("Contraste");
        jContraste.setBorder(null);
        jContraste.setMargin(new java.awt.Insets(5, 14, 5, 14));
        jContraste.setMaximumSize(new java.awt.Dimension(31, 31));
        jContraste.setMinimumSize(new java.awt.Dimension(16, 16));
        jContraste.setPreferredSize(new java.awt.Dimension(16, 16));
        jContraste.addActionListener(formListener);
        jPanelContraste.add(jContraste);

        jIluminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iluminar.png"))); // NOI18N
        jIluminar.setToolTipText("Iluminar");
        jIluminar.setBorder(null);
        jIluminar.setMaximumSize(new java.awt.Dimension(31, 31));
        jIluminar.setMinimumSize(new java.awt.Dimension(16, 16));
        jIluminar.setPreferredSize(new java.awt.Dimension(16, 16));
        jIluminar.addActionListener(formListener);
        jPanelContraste.add(jIluminar);

        jOscurecer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/oscurecer.png"))); // NOI18N
        jOscurecer.setToolTipText("Oscurecer");
        jOscurecer.setBorder(null);
        jOscurecer.setMaximumSize(new java.awt.Dimension(31, 31));
        jOscurecer.setMinimumSize(new java.awt.Dimension(16, 16));
        jOscurecer.setPreferredSize(new java.awt.Dimension(16, 16));
        jOscurecer.addActionListener(formListener);
        jPanelContraste.add(jOscurecer);

        jBarraAtributo.add(jPanelContraste);

        jPanelOperaciones.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "  ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP, null, new java.awt.Color(240, 240, 240)));
        jPanelOperaciones.setMaximumSize(new java.awt.Dimension(160, 110));
        jPanelOperaciones.setMinimumSize(new java.awt.Dimension(140, 51));
        jPanelOperaciones.setPreferredSize(new java.awt.Dimension(160, 110));
        jPanelOperaciones.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 2));

        jSinusoidal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sinusoidal.png"))); // NOI18N
        jSinusoidal.setToolTipText("Sinusoidal");
        jSinusoidal.setMaximumSize(new java.awt.Dimension(31, 31));
        jSinusoidal.setMinimumSize(new java.awt.Dimension(32, 25));
        jSinusoidal.setPreferredSize(new java.awt.Dimension(32, 25));
        jSinusoidal.addActionListener(formListener);
        jPanelOperaciones.add(jSinusoidal);

        jSepia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sepia.png"))); // NOI18N
        jSepia.setToolTipText("Sepia");
        jSepia.setMaximumSize(new java.awt.Dimension(31, 31));
        jSepia.setMinimumSize(new java.awt.Dimension(32, 25));
        jSepia.setPreferredSize(new java.awt.Dimension(32, 25));
        jSepia.addActionListener(formListener);
        jPanelOperaciones.add(jSepia);

        jTransNivGrises.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/escala-de-grises.png"))); // NOI18N
        jTransNivGrises.setToolTipText("Trasformar a  niveles de grises");
        jTransNivGrises.setMaximumSize(new java.awt.Dimension(31, 31));
        jTransNivGrises.setMinimumSize(new java.awt.Dimension(32, 25));
        jTransNivGrises.setPreferredSize(new java.awt.Dimension(32, 25));
        jTransNivGrises.addActionListener(formListener);
        jPanelOperaciones.add(jTransNivGrises);

        jMiFucnion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/miFuncion.png"))); // NOI18N
        jMiFucnion.setToolTipText("Cosrai");
        jMiFucnion.setMaximumSize(new java.awt.Dimension(31, 31));
        jMiFucnion.setMinimumSize(new java.awt.Dimension(32, 25));
        jMiFucnion.setPreferredSize(new java.awt.Dimension(32, 25));
        jMiFucnion.addActionListener(formListener);
        jPanelOperaciones.add(jMiFucnion);

        jHistograma.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/histrograma.png"))); // NOI18N
        jHistograma.setToolTipText("Histograma");
        jHistograma.setPreferredSize(new java.awt.Dimension(32, 25));
        jHistograma.addActionListener(formListener);
        jPanelOperaciones.add(jHistograma);

        jTintado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/TinOp.png"))); // NOI18N
        jTintado.setToolTipText("Tintado");
        jTintado.setPreferredSize(new java.awt.Dimension(32, 25));
        jTintado.addActionListener(formListener);
        jPanelOperaciones.add(jTintado);

        jSobel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/gradiente.png"))); // NOI18N
        jSobel.setToolTipText("Sobel");
        jSobel.setActionCommand("jSobel");
        jSobel.setMaximumSize(new java.awt.Dimension(31, 31));
        jSobel.setMinimumSize(new java.awt.Dimension(31, 31));
        jSobel.setPreferredSize(new java.awt.Dimension(31, 31));
        jSobel.addActionListener(formListener);
        jPanelOperaciones.add(jSobel);

        jNegativo1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/negativo.png"))); // NOI18N
        jNegativo1.setToolTipText("Sobel");
        jNegativo1.setActionCommand("jSobel");
        jNegativo1.setMaximumSize(new java.awt.Dimension(31, 31));
        jNegativo1.setMinimumSize(new java.awt.Dimension(31, 31));
        jNegativo1.setPreferredSize(new java.awt.Dimension(31, 31));
        jNegativo1.addActionListener(formListener);
        jPanelOperaciones.add(jNegativo1);

        jBarraAtributo.add(jPanelOperaciones);

        jPanelRotacion.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Rotación", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));
        jPanelRotacion.setMaximumSize(new java.awt.Dimension(180, 60));
        jPanelRotacion.setPreferredSize(new java.awt.Dimension(180, 60));
        jPanelRotacion.setLayout(new javax.swing.BoxLayout(jPanelRotacion, javax.swing.BoxLayout.LINE_AXIS));

        jRotación.setMajorTickSpacing(90);
        jRotación.setMaximum(360);
        jRotación.setPaintTicks(true);
        jRotación.setToolTipText("Rotación");
        jRotación.setValue(0);
        jRotación.setMaximumSize(new java.awt.Dimension(75, 31));
        jRotación.setMinimumSize(new java.awt.Dimension(75, 31));
        jRotación.setPreferredSize(new java.awt.Dimension(75, 31));
        jRotación.addChangeListener(formListener);
        jRotación.addFocusListener(formListener);
        jPanelRotacion.add(jRotación);

        jRot90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion90.png"))); // NOI18N
        jRot90.setToolTipText("Rotación");
        jRot90.setMaximumSize(new java.awt.Dimension(31, 31));
        jRot90.setMinimumSize(new java.awt.Dimension(16, 16));
        jRot90.setPreferredSize(new java.awt.Dimension(16, 16));
        jRot90.addActionListener(formListener);
        jPanelRotacion.add(jRot90);

        jRo180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion180.png"))); // NOI18N
        jRo180.setToolTipText("Rotación");
        jRo180.setMaximumSize(new java.awt.Dimension(31, 31));
        jRo180.setMinimumSize(new java.awt.Dimension(16, 16));
        jRo180.setPreferredSize(new java.awt.Dimension(16, 16));
        jRo180.addActionListener(formListener);
        jPanelRotacion.add(jRo180);

        jRo270.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion270.png"))); // NOI18N
        jRo270.setToolTipText("Rotación");
        jRo270.setMaximumSize(new java.awt.Dimension(31, 31));
        jRo270.setMinimumSize(new java.awt.Dimension(16, 16));
        jRo270.setPreferredSize(new java.awt.Dimension(16, 36));
        jRo270.addActionListener(formListener);
        jPanelRotacion.add(jRo270);

        jBarraAtributo.add(jPanelRotacion);

        jPanelEscala.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Escala", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));
        jPanelEscala.setMaximumSize(new java.awt.Dimension(80, 60));
        jPanelEscala.setMinimumSize(new java.awt.Dimension(80, 60));
        jPanelEscala.setPreferredSize(new java.awt.Dimension(80, 60));
        jPanelEscala.setLayout(new javax.swing.BoxLayout(jPanelEscala, javax.swing.BoxLayout.LINE_AXIS));

        jEscAumentar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/aumentar.png"))); // NOI18N
        jEscAumentar.setToolTipText("Escalar");
        jEscAumentar.setMaximumSize(new java.awt.Dimension(31, 31));
        jEscAumentar.setMinimumSize(new java.awt.Dimension(16, 16));
        jEscAumentar.setPreferredSize(new java.awt.Dimension(16, 16));
        jEscAumentar.addActionListener(formListener);
        jPanelEscala.add(jEscAumentar);

        jEscDisminuir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/disminuir.png"))); // NOI18N
        jEscDisminuir.setToolTipText("Escalar");
        jEscDisminuir.setMaximumSize(new java.awt.Dimension(31, 31));
        jEscDisminuir.setMinimumSize(new java.awt.Dimension(16, 16));
        jEscDisminuir.setPreferredSize(new java.awt.Dimension(16, 16));
        jEscDisminuir.addActionListener(formListener);
        jPanelEscala.add(jEscDisminuir);

        jBarraAtributo.add(jPanelEscala);

        jPanelBinarias.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Binarias", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));
        jPanelBinarias.setMaximumSize(new java.awt.Dimension(160, 60));
        jPanelBinarias.setMinimumSize(new java.awt.Dimension(24, 60));
        jPanelBinarias.setPreferredSize(new java.awt.Dimension(170, 60));
        jPanelBinarias.setLayout(new javax.swing.BoxLayout(jPanelBinarias, javax.swing.BoxLayout.X_AXIS));

        jBinariSumar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/suma.png"))); // NOI18N
        jBinariSumar.setToolTipText("Suma binaria");
        jBinariSumar.setMaximumSize(new java.awt.Dimension(31, 31));
        jBinariSumar.setMinimumSize(new java.awt.Dimension(31, 31));
        jBinariSumar.setPreferredSize(new java.awt.Dimension(31, 31));
        jBinariSumar.addActionListener(formListener);
        jPanelBinarias.add(jBinariSumar);

        jBinariRestar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/resta.png"))); // NOI18N
        jBinariRestar.setToolTipText("Resta binaria");
        jBinariRestar.setMaximumSize(new java.awt.Dimension(31, 31));
        jBinariRestar.setMinimumSize(new java.awt.Dimension(31, 31));
        jBinariRestar.setPreferredSize(new java.awt.Dimension(31, 31));
        jBinariRestar.addActionListener(formListener);
        jPanelBinarias.add(jBinariRestar);

        jMezclaImagenes.setToolTipText("Mezclador de imágenes");
        jMezclaImagenes.addChangeListener(formListener);
        jMezclaImagenes.addFocusListener(formListener);
        jPanelBinarias.add(jMezclaImagenes);

        jBarraAtributo.add(jPanelBinarias);

        jPanelUmbralizacion.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Umbralización", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));
        jPanelUmbralizacion.setMaximumSize(new java.awt.Dimension(120, 60));
        jPanelUmbralizacion.setMinimumSize(new java.awt.Dimension(120, 60));
        jPanelUmbralizacion.setPreferredSize(new java.awt.Dimension(120, 60));
        jPanelUmbralizacion.setLayout(new java.awt.GridBagLayout());

        jUmbralizacion.setMaximum(255);
        jUmbralizacion.setToolTipText("Umbralización");
        jUmbralizacion.setValue(128);
        jUmbralizacion.setMaximumSize(new java.awt.Dimension(80, 30));
        jUmbralizacion.setMinimumSize(new java.awt.Dimension(36, 30));
        jUmbralizacion.setPreferredSize(new java.awt.Dimension(100, 30));
        jUmbralizacion.addChangeListener(formListener);
        jUmbralizacion.addFocusListener(formListener);
        jPanelUmbralizacion.add(jUmbralizacion, new java.awt.GridBagConstraints());

        jBarraAtributo.add(jPanelUmbralizacion);

        jPanelHerrmientas.add(jBarraAtributo);

        getContentPane().add(jPanelHerrmientas, java.awt.BorderLayout.EAST);

        jMenuBar1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jMenuBar1.setMaximumSize(new java.awt.Dimension(300, 32771));

        jMenuArchivo.setText("Archivo");

        jArchivoNuevo.setText("Nuevo");
        jArchivoNuevo.addActionListener(formListener);
        jMenuArchivo.add(jArchivoNuevo);

        jArchivoAbrirMenu.setText("Abrir");
        jArchivoAbrirMenu.addActionListener(formListener);
        jMenuArchivo.add(jArchivoAbrirMenu);

        jArchivoGuardarMenu.setText("Guardar");
        jArchivoGuardarMenu.addActionListener(formListener);
        jMenuArchivo.add(jArchivoGuardarMenu);

        jActivarCamara.setText("Activar cámara");
        jActivarCamara.addActionListener(formListener);
        jMenuArchivo.add(jActivarCamara);

        jCapturar.setText("Capturar");
        jCapturar.addActionListener(formListener);
        jMenuArchivo.add(jCapturar);

        jMenuBar1.add(jMenuArchivo);

        jMenuEdición.setText("Edición");

        jEdiVerBarraEstado.setSelected(true);
        jEdiVerBarraEstado.setText("Ver barra de estado");
        jEdiVerBarraEstado.addActionListener(formListener);
        jMenuEdición.add(jEdiVerBarraEstado);

        jVerBarraFormas.setSelected(true);
        jVerBarraFormas.setText("Ver barra de formas");
        jVerBarraFormas.addActionListener(formListener);
        jMenuEdición.add(jVerBarraFormas);

        jVerBarraAtributos.setSelected(true);
        jVerBarraAtributos.setText("Ver barra de atributos");
        jVerBarraAtributos.setPreferredSize(new java.awt.Dimension(147, 22));
        jVerBarraAtributos.addActionListener(formListener);
        jMenuEdición.add(jVerBarraAtributos);

        jMenuBar1.add(jMenuEdición);

        jMenu1.setText("Imagén");

        jRedimensionar.setText("Tamaño imagen");
        jRedimensionar.addActionListener(formListener);
        jMenu1.add(jRedimensionar);

        jNegativo.setText("Negativo");
        jNegativo.addActionListener(formListener);
        jMenu1.add(jNegativo);

        jDuplicar.setText("Duplicar");
        jDuplicar.addActionListener(formListener);
        jMenu1.add(jDuplicar);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.FocusListener, javax.swing.event.ChangeListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == jNuevo) {
                Paint.this.jNuevoActionPerformed(evt);
            }
            else if (evt.getSource() == jAbrir) {
                Paint.this.jAbrirActionPerformed(evt);
            }
            else if (evt.getSource() == jGuardar) {
                Paint.this.jGuardarActionPerformed(evt);
            }
            else if (evt.getSource() == jBotonCapturar) {
                Paint.this.jBotonCapturarActionPerformed(evt);
            }
            else if (evt.getSource() == jPunto) {
                Paint.this.jPuntoActionPerformed(evt);
            }
            else if (evt.getSource() == jLinea) {
                Paint.this.jLineaActionPerformed(evt);
            }
            else if (evt.getSource() == jRectangulo) {
                Paint.this.jRectanguloActionPerformed(evt);
            }
            else if (evt.getSource() == jRoundRectangle) {
                Paint.this.jRoundRectangleActionPerformed(evt);
            }
            else if (evt.getSource() == jOvalo) {
                Paint.this.jOvaloActionPerformed(evt);
            }
            else if (evt.getSource() == jCurva) {
                Paint.this.jCurvaActionPerformed(evt);
            }
            else if (evt.getSource() == jPoligono) {
                Paint.this.jPoligonoActionPerformed(evt);
            }
            else if (evt.getSource() == jPoligonoAbierto) {
                Paint.this.jPoligonoAbiertoActionPerformed(evt);
            }
            else if (evt.getSource() == jTrazoLibre) {
                Paint.this.jTrazoLibreActionPerformed(evt);
            }
            else if (evt.getSource() == jEditar) {
                Paint.this.jEditarActionPerformed(evt);
            }
            else if (evt.getSource() == jMenuTrazo) {
                Paint.this.jMenuTrazoActionPerformed(evt);
            }
            else if (evt.getSource() == jMenuColores) {
                Paint.this.jMenuColoresActionPerformed(evt);
            }
            else if (evt.getSource() == jPanelColores) {
                Paint.this.jPanelColoresActionPerformed(evt);
            }
            else if (evt.getSource() == jRellenar) {
                Paint.this.jRellenarActionPerformed(evt);
            }
            else if (evt.getSource() == jRellenoDegradados) {
                Paint.this.jRellenoDegradadosActionPerformed(evt);
            }
            else if (evt.getSource() == jBorrarRelleno) {
                Paint.this.jBorrarRellenoActionPerformed(evt);
            }
            else if (evt.getSource() == jTransparencia) {
                Paint.this.jTransparenciaActionPerformed(evt);
            }
            else if (evt.getSource() == jAlisar) {
                Paint.this.jAlisarActionPerformed(evt);
            }
            else if (evt.getSource() == jPlayAudio) {
                Paint.this.jPlayAudioActionPerformed(evt);
            }
            else if (evt.getSource() == jStopAudio) {
                Paint.this.jStopAudioActionPerformed(evt);
            }
            else if (evt.getSource() == jGrabarAudio) {
                Paint.this.jGrabarAudioActionPerformed(evt);
            }
            else if (evt.getSource() == jFiltros) {
                Paint.this.jFiltrosActionPerformed(evt);
            }
            else if (evt.getSource() == jContraste) {
                Paint.this.jContrasteActionPerformed(evt);
            }
            else if (evt.getSource() == jIluminar) {
                Paint.this.jIluminarActionPerformed(evt);
            }
            else if (evt.getSource() == jOscurecer) {
                Paint.this.jOscurecerActionPerformed(evt);
            }
            else if (evt.getSource() == jSinusoidal) {
                Paint.this.jSinusoidalActionPerformed(evt);
            }
            else if (evt.getSource() == jSepia) {
                Paint.this.jSepiaActionPerformed(evt);
            }
            else if (evt.getSource() == jTransNivGrises) {
                Paint.this.jTransNivGrisesActionPerformed(evt);
            }
            else if (evt.getSource() == jMiFucnion) {
                Paint.this.jMiFucnionActionPerformed(evt);
            }
            else if (evt.getSource() == jHistograma) {
                Paint.this.jHistogramaActionPerformed(evt);
            }
            else if (evt.getSource() == jTintado) {
                Paint.this.jTintadoActionPerformed(evt);
            }
            else if (evt.getSource() == jSobel) {
                Paint.this.jSobelActionPerformed(evt);
            }
            else if (evt.getSource() == jNegativo1) {
                Paint.this.jNegativo1ActionPerformed(evt);
            }
            else if (evt.getSource() == jRot90) {
                Paint.this.jRot90ActionPerformed(evt);
            }
            else if (evt.getSource() == jRo180) {
                Paint.this.jRo180ActionPerformed(evt);
            }
            else if (evt.getSource() == jRo270) {
                Paint.this.jRo270ActionPerformed(evt);
            }
            else if (evt.getSource() == jEscAumentar) {
                Paint.this.jEscAumentarActionPerformed(evt);
            }
            else if (evt.getSource() == jEscDisminuir) {
                Paint.this.jEscDisminuirActionPerformed(evt);
            }
            else if (evt.getSource() == jBinariSumar) {
                Paint.this.jBinariSumarActionPerformed(evt);
            }
            else if (evt.getSource() == jBinariRestar) {
                Paint.this.jBinariRestarActionPerformed(evt);
            }
            else if (evt.getSource() == jArchivoNuevo) {
                Paint.this.jArchivoNuevoActionPerformed(evt);
            }
            else if (evt.getSource() == jArchivoAbrirMenu) {
                Paint.this.jArchivoAbrirMenuActionPerformed(evt);
            }
            else if (evt.getSource() == jArchivoGuardarMenu) {
                Paint.this.jArchivoGuardarMenuActionPerformed(evt);
            }
            else if (evt.getSource() == jActivarCamara) {
                Paint.this.jActivarCamaraActionPerformed(evt);
            }
            else if (evt.getSource() == jCapturar) {
                Paint.this.jCapturarActionPerformed(evt);
            }
            else if (evt.getSource() == jEdiVerBarraEstado) {
                Paint.this.jEdiVerBarraEstadoActionPerformed(evt);
            }
            else if (evt.getSource() == jVerBarraFormas) {
                Paint.this.jVerBarraFormasActionPerformed(evt);
            }
            else if (evt.getSource() == jVerBarraAtributos) {
                Paint.this.jVerBarraAtributosActionPerformed(evt);
            }
            else if (evt.getSource() == jRedimensionar) {
                Paint.this.jRedimensionarActionPerformed(evt);
            }
            else if (evt.getSource() == jNegativo) {
                Paint.this.jNegativoActionPerformed(evt);
            }
            else if (evt.getSource() == jDuplicar) {
                Paint.this.jDuplicarActionPerformed(evt);
            }
        }

        public void focusGained(java.awt.event.FocusEvent evt) {
            if (evt.getSource() == jBrillo) {
                Paint.this.jBrilloFocusGained(evt);
            }
            else if (evt.getSource() == jRotación) {
                Paint.this.jRotaciónFocusGained(evt);
            }
            else if (evt.getSource() == jMezclaImagenes) {
                Paint.this.jMezclaImagenesFocusGained(evt);
            }
            else if (evt.getSource() == jUmbralizacion) {
                Paint.this.jUmbralizacionFocusGained(evt);
            }
        }

        public void focusLost(java.awt.event.FocusEvent evt) {
            if (evt.getSource() == jBrillo) {
                Paint.this.jBrilloFocusLost(evt);
            }
            else if (evt.getSource() == jRotación) {
                Paint.this.jRotaciónFocusLost(evt);
            }
            else if (evt.getSource() == jUmbralizacion) {
                Paint.this.jUmbralizacionFocusLost(evt);
            }
        }

        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            if (evt.getSource() == jGrosor) {
                Paint.this.jGrosorStateChanged(evt);
            }
            else if (evt.getSource() == jBrillo) {
                Paint.this.jBrilloStateChanged(evt);
            }
            else if (evt.getSource() == jRotación) {
                Paint.this.jRotaciónStateChanged(evt);
            }
            else if (evt.getSource() == jMezclaImagenes) {
                Paint.this.jMezclaImagenesStateChanged(evt);
            }
            else if (evt.getSource() == jUmbralizacion) {
                Paint.this.jUmbralizacionStateChanged(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Método que devuelve la vetanaInterna seleccionada, en el caso de que la
     * ventana seleccionada no sea del tipo ventanaInterna seleccionará la
     * siguiente
     *
     * @return - Devuelve la ventanaInterna seleccionada
     */
    private VentanaInterna getVentanaInterna() {
        VentanaInterna vi = null;
        JInternalFrame ventana;
        ventana = jEscritorio.getSelectedFrame();
        if ((ventana instanceof VentanaInterna)) {
            vi = (VentanaInterna) ventana;
        } else if (jEscritorio.getAllFrames().length > 1) {
            ventana = jEscritorio.selectFrame(false);
            if (!(ventana instanceof VentanaInterna)) {
                vi = (VentanaInterna) ventana;
            }
        }
        return vi;
    }

    /**
     * Devuelve el escritorio que se esta usando
     *
     * @return Devuelve un JDesktopPane
     */
    public JDesktopPane getEscritorio() {
        return this.jEscritorio;
    }

    /**
     * Crea una nueva ventana de tipo VentanaInternaImagen
     *
     * @param evt - Evento producido por el ratón
     */
    private void jArchivoNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jArchivoNuevoActionPerformed
        VentanaInternaImagen vi = new VentanaInternaImagen(this);
        jEscritorio.add(vi);
        vi.setVisible(true);
        vi.setTitle("Nuevo lienzo");
        this.jGrosor.setValue(1);
        BufferedImage img;
        img = new BufferedImage(this.ancho, this.alto, BufferedImage.TYPE_INT_ARGB);
        Graphics2D createGraphics = img.createGraphics();
        createGraphics.setColor(Color.white);
        createGraphics.fillRect(0, 0, img.getWidth(), img.getHeight());
        vi.getLienzo().setImage(img);
        vi.getLienzo().setStroke(this.jMenuTrazo.getSelectedIndex());
        this.jBarraEstado.setText("Nuevo");
    }//GEN-LAST:event_jArchivoNuevoActionPerformed
    /**
     * Actualiza el grosor de la forma
     *
     * @param evt - Evento producido por el ratón
     */
    private void jGrosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jGrosorStateChanged
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna.isImagen() && this.ventanaInterna != null) {
            ((VentanaInternaImagen) this.ventanaInterna).getLienzo().setGrosor(Integer.parseInt(this.jGrosor.getValue().toString()));
        }
    }//GEN-LAST:event_jGrosorStateChanged
    /**
     * Método encargado de abrir un archivo, para ello abre un diálogo donde
     * podras seleccionar el archivo que desees
     *
     * @param evt - Evento producido por el ratón
     */
    private void jArchivoAbrirMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jArchivoAbrirMenuActionPerformed
        JFileChooser dlg = new JFileChooser();
        AudioFileFormat.Type infoFileFormat[] = AudioSystem.getAudioFileTypes();
        String extensiones[] = new String[infoFileFormat.length];
        for (int i = 0; i < infoFileFormat.length; i++) {
            extensiones[i] = infoFileFormat[i].getExtension();
        }
        String sFiltro = "Audio " + Arrays.toString(extensiones);
        FileNameExtensionFilter filtro = new FileNameExtensionFilter(sFiltro, extensiones);
        dlg.setFileFilter(filtro);
        FileNameExtensionFilter filtro1 = new FileNameExtensionFilter("Imagenes" + imprimirFormatos(true), ImageIO.getWriterFormatNames());
        dlg.addChoosableFileFilter(filtro1);
        dlg.setFileFilter(filtro1);

        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
                VentanaInterna vi = null;
                if (dlg.getFileFilter().equals(filtro1)) {
                    BufferedImage img = ImageIO.read(f);
                    vi = new VentanaInternaImagen(this);
                    ((VentanaInternaImagen) vi).getLienzo().setImage(img);
                } else if (dlg.getFileFilter().equals(filtro)) {
                    vi = new VentanaInternaSonido(f);
                    ((VentanaInternaSonido) vi).setPlay(jPlayAudio);
                    ((VentanaInternaSonido) vi).setStop(jStopAudio);
                } else {
                    vi = VentanaInternaReproduccionVideo.getInstance(f);
                }
                this.jEscritorio.add(vi);
                vi.setTitle(f.getName());
                vi.setVisible(true);
            } catch (Exception ex) {
                System.err.println("Error al leer el archivo");
                JOptionPane.showMessageDialog(null, "Error al leer el archivo");
            }

        }
        this.jBarraEstado.setText("Abrir");
    }//GEN-LAST:event_jArchivoAbrirMenuActionPerformed
    /**
     * Método encargado de grabar una imagén o un sonido en un archivo
     *
     * @param evt - Evento producido por el ratón
     */
    private void jArchivoGuardarMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jArchivoGuardarMenuActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (ventanaInterna.isImagen()) {
            JFileChooser dlg = new JFileChooser();
            FileNameExtensionFilter filtro;
            filtro = new FileNameExtensionFilter("Imagenes" + imprimirFormatos(true), ImageIO.getWriterFormatNames());
            dlg.addChoosableFileFilter(filtro);
            dlg.setFileFilter(filtro);
            int resp = dlg.showSaveDialog(this);
            if (resp == JFileChooser.APPROVE_OPTION) {
                try {
                    BufferedImage img = ((VentanaInternaImagen) this.ventanaInterna).getLienzo().getImage(true);
                    if (img != null) {
                        File f = null;
                        String extension = dlg.getSelectedFile().getName();
                        if (!extension.endsWith(".jpg") && !extension.endsWith(".bmp")
                                && !extension.endsWith(".gif") && !extension.endsWith(".png")
                                && !extension.endsWith(".wbmp") && !extension.endsWith(".jpeg")) {
                            extension = ".jpg";
                            f = new File(dlg.getSelectedFile() + extension);
                            if (f.exists()) {
                                f.delete();
                                f = new File(dlg.getSelectedFile() + extension);
                            }
                        } else {
                            f = dlg.getSelectedFile();
                            if (f.exists()) {
                                f.delete();
                                f = new File(dlg.getSelectedFile() + extension);
                            }
                        }
                        ImageIO.write(img, "jpg", f);
                    }
                } catch (Exception ex) {
                    System.err.println("Error al guardar la imagen");
                    JOptionPane.showMessageDialog(null, "Error al guardar la imagen");
                }
            }
            this.jBarraEstado.setText("Guardar");
        } else {
            JOptionPane.showMessageDialog(null, "Solo puede grabar imagenes");
        }
    }//GEN-LAST:event_jArchivoGuardarMenuActionPerformed
    /**
     * Muestra u oculta la barra de estado
     *
     * @param evt - Evento producido por el ratón
     */
    private void jEdiVerBarraEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEdiVerBarraEstadoActionPerformed
        if (this.jEdiVerBarraEstado.isSelected()) {
            this.jBarraEstado.setVisible(true);
        } else {
            this.jBarraEstado.setVisible(false);
        }
    }//GEN-LAST:event_jEdiVerBarraEstadoActionPerformed
    /**
     * Muestra u oculta la barra de formas
     *
     * @param evt - Evento producido por el ratón
     */
    private void jVerBarraFormasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jVerBarraFormasActionPerformed
        if (this.jVerBarraFormas.isSelected()) {
            this.jBarraFormas.setVisible(true);
        } else {
            this.jBarraFormas.setVisible(false);
        }
    }//GEN-LAST:event_jVerBarraFormasActionPerformed
    /**
     * Muestra u oculta la barra de atributos
     *
     * @param evt - Evento producido por el ratón
     */
    private void jVerBarraAtributosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jVerBarraAtributosActionPerformed
        if (this.jVerBarraAtributos.isSelected()) {
            this.jBarraAtributo.setVisible(true);
        } else {
            this.jBarraAtributo.setVisible(false);
        }
    }//GEN-LAST:event_jVerBarraAtributosActionPerformed

    /**
     * Método encargado de abrir un archivo, para ello abre un diálogo donde
     * podras seleccionar el archivo que desees
     *
     * @param evt - Evento producido por el ratón
     */
    private void jAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAbrirActionPerformed
        JFileChooser dlg = new JFileChooser();
        AudioFileFormat.Type infoFileFormat[] = AudioSystem.getAudioFileTypes();
        String extensiones[] = new String[infoFileFormat.length];
        for (int i = 0; i < infoFileFormat.length; i++) {
            extensiones[i] = infoFileFormat[i].getExtension();
        }
        String sFiltro = "Audio " + Arrays.toString(extensiones);
        FileNameExtensionFilter filtro = new FileNameExtensionFilter(sFiltro, extensiones);
        dlg.setFileFilter(filtro);
        FileNameExtensionFilter filtro1 = new FileNameExtensionFilter("Imagenes" + imprimirFormatos(true), ImageIO.getWriterFormatNames());
        dlg.addChoosableFileFilter(filtro1);
        dlg.setFileFilter(filtro1);

        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
                VentanaInterna vi = null;
                if (dlg.getFileFilter().equals(filtro1)) {
                    BufferedImage img = ImageIO.read(f);
                    vi = new VentanaInternaImagen(this);
                    ((VentanaInternaImagen) vi).getLienzo().setImage(img);
                } else if (dlg.getFileFilter().equals(filtro)) {
                    vi = new VentanaInternaSonido(f);
                    ((VentanaInternaSonido) vi).setPlay(jPlayAudio);
                    ((VentanaInternaSonido) vi).setStop(jStopAudio);
                } else {
                    vi = VentanaInternaReproduccionVideo.getInstance(f);
                }
                this.jEscritorio.add(vi);
                vi.setTitle(f.getName());
                vi.setVisible(true);
            } catch (Exception ex) {
                System.err.println("Error al leer el archivo");
                JOptionPane.showMessageDialog(null, "Error al guardar el archivo");
            }

        }
        this.jBarraEstado.setText("Abrir");
    }//GEN-LAST:event_jAbrirActionPerformed
    /**
     * Crea una nueva ventana de tipo VentanaInternaImagen
     *
     * @param evt - Evento producido por el ratón
     */
    private void jNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNuevoActionPerformed
        VentanaInternaImagen vi = new VentanaInternaImagen(this);
        jEscritorio.add(vi);
        vi.setVisible(true);
        vi.setTitle("Nuevo lienzo");
        this.jGrosor.setValue(1);
        BufferedImage img;
        img = new BufferedImage(this.ancho, this.alto, BufferedImage.TYPE_INT_ARGB);
        Graphics2D createGraphics = img.createGraphics();
        createGraphics.setColor(Color.white);
        createGraphics.fillRect(0, 0, img.getWidth(), img.getHeight());
        vi.getLienzo().setImage(img);
        this.jBarraEstado.setText("Nuevo");
    }//GEN-LAST:event_jNuevoActionPerformed
    /**
     * Método que sirve para obtener los formatos de una imagen, permite obtener
     * los formatos que puede leer java y los formatos que puede escribir
     *
     * @param guardar - Booleano para elegir si deseas obtener los formatos de
     * grabado o de apertura
     * @return - Devuelve los formatos solicitados
     */
    private String imprimirFormatos(boolean guardar) {
        String[] formatos;
        if (guardar = true) {
            formatos = ImageIO.getWriterFileSuffixes();
        } else {
            formatos = ImageIO.getReaderFileSuffixes();
        }
        String salida = "[ ";
        for (int i = 0; i < formatos.length; i++) {
            salida += formatos[i] + " ";
        }
        salida += "]";
        return salida;
    }

    /**
     * Método encargado de grabar una imagén o un sonido en un archivo
     *
     * @param evt - Evento producido por el ratón
     */
    private void jGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jGuardarActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (ventanaInterna.isImagen()) {
            JFileChooser dlg = new JFileChooser();
            FileNameExtensionFilter filtro;
            filtro = new FileNameExtensionFilter("Imagenes" + imprimirFormatos(true), ImageIO.getWriterFormatNames());
            dlg.addChoosableFileFilter(filtro);
            dlg.setFileFilter(filtro);
            int resp = dlg.showSaveDialog(this);
            if (resp == JFileChooser.APPROVE_OPTION) {
                try {
                    BufferedImage img = ((VentanaInternaImagen) this.ventanaInterna).getLienzo().getImage(true);
                    if (img != null) {
                        File f = null;
                        String extension = dlg.getSelectedFile().getName();
                        if (!extension.endsWith(".jpg") && !extension.endsWith(".bmp")
                                && !extension.endsWith(".gif") && !extension.endsWith(".png")
                                && !extension.endsWith(".wbmp") && !extension.endsWith(".jpeg")) {
                            extension = ".jpg";
                            f = new File(dlg.getSelectedFile() + extension);
                            if (f.exists()) {
                                f.delete();
                                f = new File(dlg.getSelectedFile() + extension);
                            }
                        } else {
                            f = dlg.getSelectedFile();
                            if (f.exists()) {
                                f.delete();
                                f = new File(dlg.getSelectedFile() + extension);
                            }
                        }
                        ImageIO.write(img, "jpg", f);
                    }
                } catch (Exception ex) {
                    System.err.println("Error al guardar la imagen");
                    JOptionPane.showMessageDialog(null, "Error al guardar la imagen");
                }
            }
            this.jBarraEstado.setText("Guardar");
        } else {
            JOptionPane.showMessageDialog(null, "Solo puede grabar imagenes");
        }
    }//GEN-LAST:event_jGuardarActionPerformed
    /**
     * Método encargado de activar el alisado, para ello envia un booleano a
     * lienzo2D, ordenando que el alisado se active
     *
     * @param evt - Evento producido por el ratón
     */
    private void jAlisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAlisarActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (ventanaInterna != null && this.ventanaInterna.isImagen()) {
            ((VentanaInternaImagen) this.ventanaInterna).getLienzo().setAlisar(this.jAlisar.isSelected());
            this.jBarraEstado.setText("Alisado");
        }
    }//GEN-LAST:event_jAlisarActionPerformed
    /**
     * En este método pueden seleccionar un conjunto de filtros a aplicar en una
     * imagen
     *
     * @param evt - Evento producido por el ratón
     */
    private void jFiltrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFiltrosActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            if (this.getVentanaInterna().isImagen()) {
                imgSource = ((VentanaInternaImagen) this.getVentanaInterna()).getLienzo().getImage();
                if (imgSource != null) {
                    try {
                        Kernel k = sm.image.KernelProducer.createKernel(this.jFiltros.getSelectedIndex());
                        ConvolveOp cop = new ConvolveOp(k, ConvolveOp.EDGE_NO_OP, null);
                        BufferedImage imgdest = cop.filter(imgSource, null);
                        ((VentanaInternaImagen) this.ventanaInterna).getLienzo().setImage(imgdest);
                        ((VentanaInternaImagen) this.ventanaInterna).getLienzo().repaint();
                    } catch (IllegalArgumentException e) {
                        System.err.println(e.getLocalizedMessage());
                        JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
                    }
                }
            }
        }

    }//GEN-LAST:event_jFiltrosActionPerformed
    /**
     * En este método pueden seleccionar un conjunto de colores a aplicar en una
     * imagen
     *
     * @param evt - Evento producido por el ratón
     */
    private void jMenuColoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuColoresActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            ((VentanaInternaImagen) this.ventanaInterna).getLienzo().setColorTrazo((Color) this.jMenuColores.getSelectedItem());
            this.jBarraEstado.setText("Selección de colores");
        }
    }//GEN-LAST:event_jMenuColoresActionPerformed
    /**
     * Método encargado de aplicar un constraste a una imagen, para ello creamos
     * un LookupTable
     *
     * @param evt - Evento producido por el ratón
     */
    private void jContrasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jContrasteActionPerformed
        if (this.getVentanaInterna().isImagen()) {
            VentanaInternaImagen vi = (VentanaInternaImagen) this.getVentanaInterna();
            if (vi != null && vi.isImagen()) {
                imgSource = vi.getLienzo().getImage();
                if (imgSource != null) {
                    try {
                        int type = sm.image.LookupTableProducer.TYPE_SFUNCION;
                        LookupTable lt = sm.image.LookupTableProducer.createLookupTable(type);
                        LookupOp lop = new LookupOp(lt, null);
                        lop.filter(imgSource, imgSource);
                        vi.repaint();
                    } catch (Exception e) {
                        System.err.println(e.getLocalizedMessage());
                        JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jContrasteActionPerformed
    /**
     * Método encargado de iluminar una imagen, para ello creamos un LookupTable
     *
     * @param evt - Evento producido por el ratón
     */
    private void jIluminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jIluminarActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            imgSource = ((VentanaInternaImagen) this.ventanaInterna).getLienzo().getImage();
            if (imgSource != null) {
                try {
                    int type = sm.image.LookupTableProducer.TYPE_LOGARITHM;
                    LookupTable lt = sm.image.LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter(imgSource, imgSource);
                    this.ventanaInterna.repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                    JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_jIluminarActionPerformed
    /**
     * Método encargado de oscurecer una imagen, para ello creamos un
     * LookupTable
     *
     * @param evt - Evento producido por el ratón
     */

    private void jOscurecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOscurecerActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            imgSource = ((VentanaInternaImagen) this.ventanaInterna).getLienzo().getImage();
            if (imgSource != null) {
                try {
                    int type = sm.image.LookupTableProducer.TYPE_POWER;
                    LookupTable lt = sm.image.LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);
                    // Imagen origen y destino iguales
                    lop.filter(imgSource, imgSource);
                    this.ventanaInterna.repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                    JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_jOscurecerActionPerformed
    /**
     * Método encargado de crear un LookupTable usando como base la función seno
     *
     * @param evt - Evento producido por el ratón /**
     */

    private void jSinusoidalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSinusoidalActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            imgSource = ((VentanaInternaImagen) this.ventanaInterna).getLienzo().getImage();
            if (imgSource != null) {
                try {
                    double w = Math.toRadians(180.0f / 255.0f);
                    LookupTable lt = seno(w);
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter(imgSource, imgSource);
                    this.ventanaInterna.repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                    JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_jSinusoidalActionPerformed
    /**
     * Cuando pinchas en el slider de rotación, grabas la imagen que esta en el
     * lienzo en una variable.
     *
     * @param evt - Evento producido por el ratón
     */
    private void jRotaciónFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jRotaciónFocusGained
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            if (imgSource != null) {
                ((VentanaInternaImagen) this.ventanaInterna).getLienzo().setImage(imgSource);
            }
        }
        if (this.getVentanaInterna().isImagen()) {
            imgSource = ((VentanaInternaImagen) this.getVentanaInterna()).getLienzo().getImage();
        }
    }//GEN-LAST:event_jRotaciónFocusGained
    /**
     * Pones a null la imagén que estas rotando
     *
     * @param evt - Evento producido por el ratón
     */
    private void jRotaciónFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jRotaciónFocusLost
        this.imgSource = null;
        this.jRotación.setValue(0);
    }//GEN-LAST:event_jRotaciónFocusLost
    /**
     * Conforme vas moviendo el slider, vas generando unos estados, en este caso
     * el estado que generas es una rotación sobre el centro de la imagen.
     * Mientras vas rotando la imagen vas repintando el lienzo
     *
     * @param evt - Evento producido por el ratón
     */
    private void jRotaciónStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRotaciónStateChanged
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            double r = Math.toRadians(this.jRotación.getValue());

            if (imgSource != null) {
                Point p = new Point(imgSource.getWidth() / 2, imgSource.getHeight() / 2);
                AffineTransform at = AffineTransform.getRotateInstance(r, p.x, p.y);
                try {
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    ((VentanaInternaImagen) this.ventanaInterna).getLienzo().setImage(imgdest);
                    ((VentanaInternaImagen) this.ventanaInterna).getLienzo().repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                    JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
                }
            }
        }

    }//GEN-LAST:event_jRotaciónStateChanged
    /**
     * Método consistente en girar una imagen en 90 grados, desde el centro
     *
     * @param evt - Evento producido por el ratón
     */
    private void jRot90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRot90ActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            imgSource = ((VentanaInternaImagen) this.ventanaInterna).getLienzo().getImage();
            double r = Math.toRadians(90);
            ((VentanaInternaImagen) this.ventanaInterna).getLienzo().setImage(imgSource);
            if (imgSource != null) {
                Point p = new Point(imgSource.getWidth() / 2, imgSource.getHeight() / 2);
                AffineTransform at = AffineTransform.getRotateInstance(r, p.x, p.y);
                try {
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    ((VentanaInternaImagen) this.ventanaInterna).getLienzo().setImage(imgdest);
                    ((VentanaInternaImagen) this.ventanaInterna).getLienzo().repaint();
                    this.imgSource = null;
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                    JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_jRot90ActionPerformed
    /**
     * Método consistente en girar una imagen en 180 grados, desde el centro
     *
     * @param evt - Evento producido por el ratón
     */
    private void jRo180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRo180ActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            imgSource = ((VentanaInternaImagen) this.ventanaInterna).getLienzo().getImage();
            double r = Math.toRadians(180);

            if (imgSource != null) {
                Point p = new Point(imgSource.getWidth() / 2, imgSource.getHeight() / 2);
                AffineTransform at = AffineTransform.getRotateInstance(r, p.x, p.y);
                try {
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    ((VentanaInternaImagen) this.ventanaInterna).getLienzo().setImage(imgdest);
                    ((VentanaInternaImagen) this.ventanaInterna).getLienzo().repaint();
                    this.imgSource = null;
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                    JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_jRo180ActionPerformed
    /**
     * Método consistente en girar una imagen en 270 grados, desde el centro
     *
     * @param evt - Evento producido por el ratón
     */
    private void jRo270ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRo270ActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            imgSource = ((VentanaInternaImagen) this.ventanaInterna).getLienzo().getImage();
            double r = Math.toRadians(270);

            if (imgSource != null) {
                Point p = new Point(imgSource.getWidth() / 2, imgSource.getHeight() / 2);
                AffineTransform at = AffineTransform.getRotateInstance(r, p.x, p.y);
                try {
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    ((VentanaInternaImagen) this.ventanaInterna).getLienzo().setImage(imgdest);
                    ((VentanaInternaImagen) this.ventanaInterna).getLienzo().repaint();
                    this.imgSource = null;
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                    JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_jRo270ActionPerformed
    /**
     * Método consistente en aumentar el escalado de una imagen, para ello creas
     * un AffineTransform del tipo Scale y luego se lo aplicas a la img de
     * destino
     *
     * @param evt - Evento producido por el ratón
     */
    private void jEscAumentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEscAumentarActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            imgSource = ((VentanaInternaImagen) this.ventanaInterna).getLienzo().getImage();
            if (imgSource != null) {
                AffineTransform at = AffineTransform.getScaleInstance(1.25, 1.25);
                try {
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    ((VentanaInternaImagen) this.ventanaInterna).getLienzo().setImage(imgdest);
                    ((VentanaInternaImagen) this.ventanaInterna).getLienzo().repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                    JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_jEscAumentarActionPerformed
    /**
     * Método consistente en disminuir el escalado de una imagen, para ello
     * creas un AffineTransform del tipo Scale y luego se lo aplicas a la img de
     * destino
     *
     * @param evt - Evento producido por el ratón
     */
    private void jEscDisminuirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEscDisminuirActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            imgSource = ((VentanaInternaImagen) this.ventanaInterna).getLienzo().getImage();
            if (imgSource != null) {
                AffineTransform at = AffineTransform.getScaleInstance(0.75, 0.75);
                try {
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    ((VentanaInternaImagen) this.ventanaInterna).getLienzo().setImage(imgdest);
                    ((VentanaInternaImagen) this.ventanaInterna).getLienzo().repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                    JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_jEscDisminuirActionPerformed
    /**
     * Pones a null la imagén a la cula le estas cambiando el brillo
     *
     * @param evt - Evento producido por el ratón
     */
    private void jBrilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jBrilloFocusLost
        this.imgSource = null;
    }//GEN-LAST:event_jBrilloFocusLost
    /**
     * Cuando pinchas en el slider de brillo, grabas la imagen que esta en el
     * lienzo en una variable.
     *
     * @param evt - Evento producido por el ratón
     */
    private void jBrilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jBrilloFocusGained
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            if (imgSource != null) {
                ((VentanaInternaImagen) this.ventanaInterna).getLienzo().setImage(imgSource);
            }
        }
        if (this.getVentanaInterna().isImagen()) {
            imgSource = ((VentanaInternaImagen) this.getVentanaInterna()).getLienzo().getImage();
        }
    }//GEN-LAST:event_jBrilloFocusGained
    /**
     * Conforme vas moviendo el slider, vas generando unos estados, en este caso
     * el estado que generas es un cambio en el brillo de la imagen. Mientras
     * vas cambiando el brillo de la imagen vas repintando el lienzo
     *
     * @param evt - Evento producido por el ratón
     */
    private void jBrilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jBrilloStateChanged
        this.ventanaInterna = this.getVentanaInterna();
        float brillo = this.jBrillo.getValue();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            if (imgSource != null) {
                try {
                    if (imgSource.getColorModel().hasAlpha()) {
                        float[] scaleFactors = new float[]{1.0f, 1.0f, 1.0f, 1.0f};
                        float[] offsets = new float[]{brillo, brillo, brillo, 0.0f};
                        RescaleOp rop = new RescaleOp(scaleFactors, offsets, null);
                        imgdest = rop.filter(imgSource, null);
                    } else {
                        RescaleOp rop = new RescaleOp(1.0f, brillo, null);
                        imgdest = rop.filter(imgSource, null);
                    }
                    ((VentanaInternaImagen) this.ventanaInterna).getLienzo().setImage(imgdest);
                    ((VentanaInternaImagen) this.ventanaInterna).getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                    JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_jBrilloStateChanged
    /**
     * Método encargado de lanzar una ventana donde podrás redimensionar o
     * escalar un lienzo
     *
     * @param evt - Evento producido por el ratón
     */
    private void jRedimensionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRedimensionarActionPerformed
        if (this.getVentanaInterna().isImagen()) {
            VentanaInternaImagen vi = (VentanaInternaImagen) this.getVentanaInterna();
            if (vi.isImagen()) {
                Redimensionar nuevoTamaño = new Redimensionar(vi, this);
                jEscritorio.add(nuevoTamaño);
                nuevoTamaño.setVisible(true);
            } else {
                System.err.print("No es una imagen");
                JOptionPane.showMessageDialog(null, "No se puede redimensionar, asegurese de que sea una imagen");
            }
        }
    }//GEN-LAST:event_jRedimensionarActionPerformed
    /**
     * Método encargado de aplicar el filtro sepia a una imagen, para ello
     * creamos un objeto sepia y le aplicamos a la imagen el filtro
     *
     * @param evt - Evento producido por el ratón
     */
    private void jSepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSepiaActionPerformed
        SepiaOp sepia = new SepiaOp();
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            imgSource = ((VentanaInternaImagen) this.ventanaInterna).getLienzo().getImage();
            sepia.filter(imgSource, imgSource);
            ((VentanaInternaImagen) this.ventanaInterna).getLienzo().repaint();
        }

    }//GEN-LAST:event_jSepiaActionPerformed
    /**
     * Método encargado de aplicar la suma binaria a una imagen, para ello
     * creamos un objeto BlendOP y le aplicamos a la imagen el filtro
     *
     * @param evt - Evento producido por el ratón
     */
    private void jBinariSumarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBinariSumarActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            VentanaInterna viNext = (VentanaInterna) jEscritorio.selectFrame(false);
            if (viNext != null && viNext.isImagen()) {
                this.imgRight = ((VentanaInternaImagen) this.ventanaInterna).getLienzo().getImage();
                this.imgLeft = ((VentanaInternaImagen) viNext).getLienzo().getImage();
                if (imgRight != null && imgLeft != null) {
                    try {
                        BlendOp op = new BlendOp(imgLeft);
                        BufferedImage imgdest = op.filter(imgRight, null);
                        this.ventanaInterna = new VentanaInternaImagen(this);
                        this.ventanaInterna.setTitle("Imagen suma");
                        ((VentanaInternaImagen) this.ventanaInterna).getLienzo().setImage(imgdest);
                        this.jEscritorio.add(this.ventanaInterna);
                        this.ventanaInterna.setVisible(true);
                    } catch (IllegalArgumentException e) {
                        System.err.println("Error: " + e.getLocalizedMessage());
                        JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jBinariSumarActionPerformed
    /**
     * Método encargado de aplicar la resta binaria a una imagen, para ello
     * creamos un objeto SubtractionOp y le aplicamos a la imagen el filtro
     *
     * @param evt - Evento producido por el ratón
     */
    private void jBinariRestarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBinariRestarActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            VentanaInterna viNext = (VentanaInterna) jEscritorio.selectFrame(false);
            if (viNext != null && viNext.isImagen()) {
                this.imgRight = ((VentanaInternaImagen) this.ventanaInterna).getLienzo().getImage();
                this.imgLeft = ((VentanaInternaImagen) viNext).getLienzo().getImage();
                if (imgRight != null && imgLeft != null) {
                    try {
                        SubtractionOp op = new SubtractionOp(imgLeft);
                        BufferedImage imgdest = op.filter(imgRight, null);
                        VentanaInterna vi = new VentanaInternaImagen(this);
                        vi.setTitle("Imagen resta");
                        ((VentanaInternaImagen) vi).getLienzo().setImage(imgdest);
                        this.jEscritorio.add(vi);
                        vi.setVisible(true);
                    } catch (IllegalArgumentException e) {
                        System.err.println("Error: " + e.getLocalizedMessage());
                        JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jBinariRestarActionPerformed
    /**
     * Cuando pinchas en el slider de mezcla, grabas la imagen de la ventana
     * activa en una variable y grabas la ventana secundaria en otra variable.
     * Además en este método se crea la imagen de destino
     *
     * @param evt - Evento producido por el ratón
     */
    private void jMezclaImagenesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jMezclaImagenesFocusGained
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            VentanaInterna viNext = (VentanaInterna) jEscritorio.selectFrame(false);
            if (viNext != null && viNext.isImagen()) {
                this.imgRight = ((VentanaInternaImagen) this.ventanaInterna).getLienzo().getImage();
                this.imgLeft = ((VentanaInternaImagen) viNext).getLienzo().getImage();
                if (this.imgRight != null && this.imgLeft != null) {
                    this.ventanaMezcla = new VentanaInternaImagen(this);
                    jEscritorio.add(ventanaMezcla);
                    this.ventanaMezcla.setTitle("Imagen mezcla");
                    this.ventanaMezcla.setLocation(50, 50);
                    ventanaMezcla.setVisible(true);
                }

            }
        }

    }//GEN-LAST:event_jMezclaImagenesFocusGained
    /**
     * Conforme vas moviendo el slider, vas generando unos estados, en este caso
     * el estado que generas es una mezcla entre las dos imagenes. Para poder
     * hacer esto hay que declarar un BlendOP de una de las imagenes y jugar con
     * su alfa. Cuando apliques el filtro a este BlendOp, le pasas la otra
     * imagen
     *
     * @param evt - Evento producido por el ratón
     */
    private void jMezclaImagenesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jMezclaImagenesStateChanged
        if (imgRight != null && imgLeft != null) {
            int valorSlider = this.jMezclaImagenes.getValue();
            float valor = valorSlider / 100.0f;
            try {
                BlendOp op = new BlendOp(imgLeft);
                op.setAlpha(valor);
                imgdest = op.filter(imgRight, null);
                ventanaMezcla.getLienzo().setImage(imgdest);
                if (jEscritorio.getSelectedFrame() != ventanaMezcla) {
                    jEscritorio.add(ventanaMezcla);
                }
                ventanaMezcla.setVisible(true);
                ventanaMezcla.toFront();

            } catch (IllegalArgumentException e) {
                System.err.println("Error: " + e.getLocalizedMessage());
                JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_jMezclaImagenesStateChanged
    /**
     * Método encargado de pasar una imagen a negativo , para ello creamos un
     * objeto LookupOp y le aplicamos la función negativo
     *
     * @param evt - Evento producido por el ratón
     */
    private void jNegativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNegativoActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            imgSource = ((VentanaInternaImagen) this.ventanaInterna).getLienzo().getImage();
            if (imgSource != null) {
                try {
                    LookupTable lt = negativo();
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter(imgSource, imgSource);
                    this.ventanaInterna.repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                    JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_jNegativoActionPerformed
    /**
     * Método encargado de duplicar una imagen, para ello creamos una nueva
     * imagen y le pasamos el lienzo de la imagen que queremos duplicar
     *
     * @param evt - Evento producido por el ratón
     */
    private void jDuplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDuplicarActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            VentanaInternaImagen vi = new VentanaInternaImagen(this);
            vi.setTitle("Imagen duplicada");
            vi.setLocation(50, 50);
            vi.getLienzo().setImage(((VentanaInternaImagen) this.ventanaInterna).getLienzo().getImage(true));
            this.jEscritorio.add(vi);
            vi.setVisible(true);

        }
    }//GEN-LAST:event_jDuplicarActionPerformed
    /**
     * Envia al lienzo un booleando indicando si el modo editar esta activo o no
     *
     * @param evt - Evento producido por el ratón
     */
    private void jEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEditarActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            ((VentanaInternaImagen) this.ventanaInterna).getLienzo().setEditar(this.jEditar.isSelected());
            this.jBarraEstado.setText("Editar");
        }
    }//GEN-LAST:event_jEditarActionPerformed
    /**
     * Envia al lienzo un booleando indicando si la forma elipse esta
     * seleccionada o no
     *
     * @param evt - Evento producido por el ratón
     */
    private void jOvaloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOvaloActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            ((VentanaInternaImagen) this.ventanaInterna).getLienzo().setForma(this.elipse);
        }
        this.jBarraEstado.setText("Elipse");
    }//GEN-LAST:event_jOvaloActionPerformed
    /**
     * Envia al lienzo un booleando indicando si la forma rectángulo esta
     * seleccionada o no
     *
     * @param evt - Evento producido por el ratón
     */
    private void jRectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRectanguloActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            ((VentanaInternaImagen) this.ventanaInterna).getLienzo().setForma(this.rectangulo);
        }
        this.jBarraEstado.setText("Rectángulo");
    }//GEN-LAST:event_jRectanguloActionPerformed
    /**
     * Envia al lienzo un booleando indicando si la forma línea esta
     * seleccionada o no
     *
     * @param evt - Evento producido por el ratón
     */
    private void jLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLineaActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            ((VentanaInternaImagen) this.ventanaInterna).getLienzo().setForma(this.linea);
        }
        this.jBarraEstado.setText("Línea");
    }//GEN-LAST:event_jLineaActionPerformed
    /**
     * Envia al lienzo un booleando indicando si la forma punto esta
     * seleccionada o no
     *
     * @param evt - Evento producido por el ratón
     */
    private void jPuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPuntoActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            ((VentanaInternaImagen) this.ventanaInterna).getLienzo().setForma(this.punto);
        }
        this.jBarraEstado.setText("Punto");
    }//GEN-LAST:event_jPuntoActionPerformed
    /**
     * Método encargado de crear una ventana de webcam
     *
     * @param evt - Evento producido por el ratón
     */
    private void jActivarCamaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jActivarCamaraActionPerformed
        try {
            VentanaInternaCamara vi = VentanaInternaCamara.getInstance();
            this.jEscritorio.add(vi);
            vi.setVisible(true);
        } catch (Exception ex) {
            System.err.println("Error al leer el video");
            JOptionPane.showMessageDialog(null, "Error al leer el video");
        }
        this.jBarraEstado.setText("Activar cámara");

    }//GEN-LAST:event_jActivarCamaraActionPerformed
    /**
     * Método encargado de tomar una foto desde la webcam y almacenarla en una
     * imagen
     *
     * @param evt - Evento producido por el ratón
     */
    private void jCapturarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCapturarActionPerformed

        VentanaInternaCamara vi = (VentanaInternaCamara) jEscritorio.getSelectedFrame();
        if (vi instanceof VentanaInternaCamara) {
            Player p = vi.getPlayer();
            if (p != null) {
                VentanaInternaImagen vinext = new VentanaInternaImagen(this);
                vinext.getLienzo().setImage(this.getFrame(p));

                this.jEscritorio.add(vinext);
                vinext.setVisible(true);
            } else {
                System.out.println("null");
            }
        }
        this.jBarraEstado.setText("Capturar");
    }//GEN-LAST:event_jCapturarActionPerformed
    /**
     * Envia al lienzo un booleando indicando si la forma curva esta
     * seleccionada o no
     *
     * @param evt - Evento producido por el ratón
     */
    private void jCurvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCurvaActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            ((VentanaInternaImagen) this.ventanaInterna).getLienzo().setForma(this.curva);
        }
        this.jBarraEstado.setText("Curva");
    }//GEN-LAST:event_jCurvaActionPerformed
    /**
     * Envia al lienzo un booleando indicando si la forma polígono esta
     * seleccionada o no
     *
     * @param evt - Evento producido por el ratón
     */
    private void jPoligonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPoligonoActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            ((VentanaInternaImagen) this.ventanaInterna).getLienzo().setForma(this.poligono);
        }
        this.jBarraEstado.setText("Poligono");
    }//GEN-LAST:event_jPoligonoActionPerformed
    /**
     * Conforme vas moviendo el slider, vas generando unos estados, en este caso
     * el estado que generas es una umbralización de la imagen. Para poder hacer
     * esto hay que declarar un UmbralizacionOp con un valor de umbralización,
     * una vez creada le aplicas a la imagen el filtro
     *
     * @param evt - Evento producido por el ratón
     */
    private void jUmbralizacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jUmbralizacionStateChanged
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            BufferedImage imgdest = null;
            try {
                int umbral = this.jUmbralizacion.getValue();
                UmbralizacionOp umbralizacion = new UmbralizacionOp(umbral);
                umbralizacion.filter(imgSource, imgSource);
                ((VentanaInternaImagen) this.ventanaInterna).getLienzo().repaint();
            } catch (Exception e) {
                System.err.println(e.getLocalizedMessage());
            }
        }

    }//GEN-LAST:event_jUmbralizacionStateChanged
    /**
     * Cuando pinchas en el slider de umbralización, grabas la imagen que esta
     * en el lienzo en una variable.
     *
     * @param evt - Evento producido por el ratón
     */
    private void jUmbralizacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jUmbralizacionFocusGained
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            if (imgSource != null) {
                ((VentanaInternaImagen) this.ventanaInterna).getLienzo().setImage(imgSource);
            }
        }

        if (this.getVentanaInterna().isImagen()) {
            imgSource = ((VentanaInternaImagen) this.getVentanaInterna()).getLienzo().getImage();
        }
    }//GEN-LAST:event_jUmbralizacionFocusGained
    /**
     * Pones a null la imagén que estas umbralizando
     *
     * @param evt - Evento producido por el ratón
     */
    private void jUmbralizacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jUmbralizacionFocusLost
        this.imgSource = null;
        this.jUmbralizacion.setValue(128);
    }//GEN-LAST:event_jUmbralizacionFocusLost
    /**
     * Método encargado de pasar una imagen a niveles de grises , para ello
     * creamos un objeto ColorConvertOp, pasandole como espacio de color, el
     * espacio de color gris. Después le aplicamos el filtro a la imagen
     *
     * @param evt - Evento producido por el ratón
     */
    private void jTransNivGrisesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTransNivGrisesActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            imgSource = ((VentanaInternaImagen) this.ventanaInterna).getLienzo().getImage();
            if (imgSource != null) {

                try {
                    ICC_Profile ip;
                    ip = ICC_Profile.getInstance(ColorSpace.CS_GRAY);
                    ColorSpace cs = new ICC_ColorSpace(ip);
                    ColorConvertOp ccop = new ColorConvertOp(cs, null);
                    ccop.filter(imgSource, imgSource);
                    ((VentanaInternaImagen) this.ventanaInterna).getLienzo().repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                    JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_jTransNivGrisesActionPerformed
    /**
     * Método encargado de pasar una imagen a cosrai , para ello creamos un
     * objeto de tipo CosraiOp, pasandole como parámetro una frecuencia. Después
     * le aplicamos el filtro a la imagen
     *
     * @param evt - Evento producido por el ratón
     */
    private void jMiFucnionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMiFucnionActionPerformed

        double w = Math.toRadians(180.0f / 255.0f);
        CosraiOp cosrai = new CosraiOp(w);
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            imgSource = ((VentanaInternaImagen) this.ventanaInterna).getLienzo().getImage();
            cosrai.filter(imgSource, imgSource);
            ((VentanaInternaImagen) this.ventanaInterna).getLienzo().repaint();
        }
    }//GEN-LAST:event_jMiFucnionActionPerformed
    /**
     * En este método se pueden seleccionar un conjunto de trazos a aplicar a
     * una forma
     *
     * @param evt - Evento producido por el ratón
     */
    private void jMenuTrazoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuTrazoActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            ((VentanaInternaImagen) this.ventanaInterna).getLienzo().setStroke(this.jMenuTrazo.getSelectedIndex());
            this.jBarraEstado.setText("Selección de trazos");
        }
    }//GEN-LAST:event_jMenuTrazoActionPerformed
    /**
     * En este método se crea una ventana, donde podrás elegir el relleno de una
     * forma
     *
     * @param evt - Evento producido por el ratón
     */
    private void jRellenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRellenarActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (ventanaInterna != null && this.ventanaInterna.isImagen()) {
            Rellenos sr = new Rellenos(ventanaInterna);
            jEscritorio.add(sr);
            sr.setVisible(true);
            this.jBarraEstado.setText("Relleno");

        }
    }//GEN-LAST:event_jRellenarActionPerformed
    /**
     * En este método se crea una ventana, donde podrás elegir la transparencia
     * de una forma
     *
     * @param evt - Evento producido por el ratón
     */
    private void jTransparenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTransparenciaActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (ventanaInterna != null && this.ventanaInterna.isImagen()) {

            Transparencias sr = new Transparencias(ventanaInterna);
            jEscritorio.add(sr);
            sr.setVisible(true);
            this.jBarraEstado.setText("Transparencia");
        }
    }//GEN-LAST:event_jTransparenciaActionPerformed
    /**
     * Método encargado de tomar una foto desde la webcam y almacenarla en una
     * imagen
     *
     * @param evt - Evento producido por el ratón
     */
    private void jBotonCapturarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBotonCapturarActionPerformed
        VentanaInternaCamara vi = (VentanaInternaCamara) jEscritorio.getSelectedFrame();
        if (vi instanceof VentanaInternaCamara) {
            Player p = vi.getPlayer();
            if (p != null) {
                VentanaInternaImagen vinext = new VentanaInternaImagen(this);
                vinext.getLienzo().setImage(this.getFrame(p));

                this.jEscritorio.add(vinext);
                vinext.setVisible(true);
            } else {
                System.out.println("null");
            }
        }
        this.jBarraEstado.setText("Capturar");
    }//GEN-LAST:event_jBotonCapturarActionPerformed
    /**
     * En este método se crea una ventana on una paleta de colores, donde podrás
     * elegir el color del trazo de la forma
     *
     * @param evt - Evento producido por el ratón
     */
    private void jPanelColoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPanelColoresActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (ventanaInterna != null && this.ventanaInterna.isImagen()) {
            Color color;
            JColorChooser ventanaDeColores = new JColorChooser();
            color = ventanaDeColores.showDialog(null, "Seleccione un Color", Color.gray);
            if (color != null) {
                ((VentanaInternaImagen) ventanaInterna).getLienzo().setColorTrazo(color);
            }
            this.jBarraEstado.setText("Paleta de colores");
        }
    }//GEN-LAST:event_jPanelColoresActionPerformed
    /**
     * Envia al lienzo un booleando indicando si la forma poligono abierto esta
     * seleccionada o no
     *
     * @param evt - Evento producido por el ratón
     */
    private void jPoligonoAbiertoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPoligonoAbiertoActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            ((VentanaInternaImagen) this.ventanaInterna).getLienzo().setForma(this.poligonoAbiero);
        }
        this.jBarraEstado.setText("Polígono abierto");
    }//GEN-LAST:event_jPoligonoAbiertoActionPerformed
    /**
     * En este método se crea una ventana, donde podrás elegir el color del
     * degradado, la dirección y tipo de degradado
     *
     * @param evt - Evento producido por el ratón
     */
    private void jRellenoDegradadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRellenoDegradadosActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (ventanaInterna != null && this.ventanaInterna.isImagen()) {
            RellenosDegradado sr = new RellenosDegradado(ventanaInterna);
            jEscritorio.add(sr);
            sr.setVisible(true);
            this.jBarraEstado.setText("Degradado");
        }
    }//GEN-LAST:event_jRellenoDegradadosActionPerformed
    /**
     * Envia al lienzo un booleando indicando si la forma rectángulo redondeado
     * esta seleccionada o no
     *
     * @param evt - Evento producido por el ratón
     */
    private void jRoundRectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRoundRectangleActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            ((VentanaInternaImagen) this.ventanaInterna).getLienzo().setForma(this.rectanguloRedondeado);
            CambiarCurvaRectangulo cambiarCurva = new CambiarCurvaRectangulo((VentanaInternaImagen) this.ventanaInterna);
            jEscritorio.add(cambiarCurva);
            cambiarCurva.setLocation(400, 100);
            cambiarCurva.setVisible(true);
            this.jBarraEstado.setText("Rectángulo redondeado");

        }
    }//GEN-LAST:event_jRoundRectangleActionPerformed
    /**
     * Método encargado de hacer que se reproduzca un sonido, sólo se
     * reproducirá un sonido en el caso de que tengamos un archivo de sonido
     * cargado
     *
     * @param evt - Evento producido por el ratón
     */
    private void jPlayAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPlayAudioActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isSonido()) {

            this.player = ((VentanaInternaSonido) this.ventanaInterna).getPlayer();
            if (player != null) {
                player.play();
            }
        } else {
            this.jStopAudio.setSelected(true);
        }
    }//GEN-LAST:event_jPlayAudioActionPerformed
    /**
     * Método encargado de parar un audio o una grabación. En el caso de que sea
     * una grabación, nos pedirá que le indiquemos un archivo donde grabar la
     * grabación
     *
     * @param evt - Evento producido por el ratón
     */
    private void jStopAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jStopAudioActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isSonido() && estoy_grabando == false) {
            this.player = ((VentanaInternaSonido) this.ventanaInterna).getPlayer();
            if (player != null) {
                player.stop();
            }
        }

        if (SMRecorder != null && estoy_grabando == true) {
            SMRecorder.stop();
            hilo.stop();
            estoy_grabando = false;
            File f;
            JFileChooser dlg = new JFileChooser();
            int resp = dlg.showSaveDialog(this);
            if (resp == JFileChooser.APPROVE_OPTION) {

                try {
                    String extension = dlg.getSelectedFile().getName();
                    if (!extension.endsWith(".wav") && !extension.endsWith(".au") && !extension.endsWith(".aif")) {
                        extension = ".wav";
                        f = new File(dlg.getSelectedFile() + extension);
                        if (f.exists()) {
                            f.delete();
                            f = new File(dlg.getSelectedFile() + extension);
                        }
                    } else {
                        f = dlg.getSelectedFile();
                        if (f.exists()) {
                            f.delete();
                            f = new File(dlg.getSelectedFile() + extension);
                        }
                    }
                    grabar.renameTo(f);

                } catch (Exception ex) {
                    System.err.println("Error al guardar la imagen");
                    JOptionPane.showMessageDialog(null, "Error al guardar la imagen");
                }
            }
        }


    }//GEN-LAST:event_jStopAudioActionPerformed
    /**
     * método encargado de grabar un sonido
     *
     * @param evt - Evento producido por el ratón
     */
    private void jGrabarAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jGrabarAudioActionPerformed

        grabar = new File("temporal");
        estoy_grabando = true;
        SMRecorder = new SMSoundRecorder(grabar);
        SMRecorder.record();

        hilo = new Thread() {
            int seg = 0;
            int min = 0;
            String minutos;
            String segundos;

            public void run() {
                try {
                    while (true) {
                        if (seg == 59) {
                            seg = 0;
                            min++;
                        }
                        seg++;
                        if (seg < 10) {
                            segundos = "0" + seg;
                        } else {
                            segundos = "" + seg;
                        }
                        if (min < 10) {
                            minutos = "0" + min;
                        } else {
                            minutos = "" + min;
                        }
                        jCronometroGrabacion.setText(minutos + ":" + segundos);
                        hilo.sleep(1000);
                    }
                } catch (java.lang.InterruptedException ie) {
                    System.out.println(ie.getMessage());
                }
            }
        };
        hilo.start();


    }//GEN-LAST:event_jGrabarAudioActionPerformed
    /**
     * Método encargado de crear el histograma de una imagen.
     *
     * @param evt - Evento producido por el ratón
     */
    private void jHistogramaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jHistogramaActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            imgSource = ((VentanaInternaImagen) this.ventanaInterna).getLienzo().getImage();
            Histogram histogram = new Histogram(imgSource);
            Histograma histograma = new Histograma(histogram);
            jEscritorio.add(histograma);
            histograma.setVisible(true);
            this.jBarraEstado.setText("Histograma");
        }
    }//GEN-LAST:event_jHistogramaActionPerformed

    private void jTintadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTintadoActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            Tintado tintado = new Tintado(((VentanaInternaImagen) this.ventanaInterna));
            jEscritorio.add(tintado);
            tintado.setLocation(400, 100);
            tintado.setVisible(true);
            this.jBarraEstado.setText("Histograma");
        }
    }//GEN-LAST:event_jTintadoActionPerformed

    private void jSobelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSobelActionPerformed
        SobelOp sobel = new SobelOp();
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            BufferedImage imgdest = null;
            imgSource = ((VentanaInternaImagen) this.ventanaInterna).getLienzo().getImage();
            sobel.filter(imgSource, imgSource);
            ((VentanaInternaImagen) this.ventanaInterna).getLienzo().repaint();
        }
    }//GEN-LAST:event_jSobelActionPerformed

    private void jTrazoLibreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTrazoLibreActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            ((VentanaInternaImagen) this.ventanaInterna).getLienzo().setForma(this.trazoLibre);
        }
        this.jBarraEstado.setText("Trazo Libre");
    }//GEN-LAST:event_jTrazoLibreActionPerformed
    /**
     * Borra el relleno o el degradado de la figura seleccionada
     *
     * @param evt - Evento producido por el ratón
     */
    private void jBorrarRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBorrarRellenoActionPerformed
        Atributo borrar = null;
        List<Atributo> atributos = new ArrayList();
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            if (((VentanaInternaImagen) this.ventanaInterna).getLienzo().getFigura() != null) {
                atributos = ((VentanaInternaImagen) this.ventanaInterna).getLienzo().getFigura().getAtributos();
                for (Atributo s : atributos) {
                    if (s instanceof RellenoSimple) {
                        borrar = s;

                    }
                }
                ((VentanaInternaImagen) this.ventanaInterna).getLienzo().getFigura().removeAtributo(borrar);
                ((VentanaInternaImagen) this.ventanaInterna).getLienzo().setRelleno(null);
            } else {
                ((VentanaInternaImagen) this.ventanaInterna).getLienzo().setRelleno(null);
            }
            ((VentanaInternaImagen) this.ventanaInterna).getLienzo().repaint();
        }
    }//GEN-LAST:event_jBorrarRellenoActionPerformed

    private void jNegativo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNegativo1ActionPerformed
        this.ventanaInterna = this.getVentanaInterna();
        if (this.ventanaInterna != null && this.ventanaInterna.isImagen()) {
            imgSource = ((VentanaInternaImagen) this.ventanaInterna).getLienzo().getImage();
            if (imgSource != null) {
                try {
                    LookupTable lt = negativo();
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter(imgSource, imgSource);
                    this.ventanaInterna.repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                    JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_jNegativo1ActionPerformed

    /**
     * Método encargado de capturar la imagen de una webcam y pasarla a una
     * imagen
     *
     * @param player - Plauer de la webcam
     * @return - Devuelve una imagen con la captura de la webcam
     */
    public BufferedImage getFrame(Player player) {
        FrameGrabbingControl fgc;
        String claseCtr = "javax.media.control.FrameGrabbingControl";
        fgc = (FrameGrabbingControl) player.getControl(claseCtr);
        Buffer bufferFrame = fgc.grabFrame();
        BufferToImage bti;
        bti = new BufferToImage((VideoFormat) bufferFrame.getFormat());
        Image img = bti.createImage(bufferFrame);
        return (BufferedImage) img;
    }

    /**
     * Transformación de la imagen en una imagen negativa
     *
     * @return - Devuelve un LookupTable
     */
    public LookupTable negativo() {
        short lt[] = new short[256];
        for (int i = 0; i < 256; i++) {
            lt[i] = (short) (255 - i);
        }
        ShortLookupTable blt = new ShortLookupTable(0, lt);
        return blt;
    }

    /**
     * A cada byte le multiplica frecuencia y le hace el seno
     *
     * @param w - Frecuencia
     * @return - Devuelve un LookupTable
     */
    public LookupTable seno(double w) {
        double k = 255.0;
        byte lt[] = new byte[256];
        for (int i = 0; i < 256; i++) {
            lt[i] = (byte) (k * Math.abs(Math.sin(w * i)));
        }
        ByteLookupTable blt = new ByteLookupTable(0, lt);
        return blt;
    }

    /**
     * Devuelve el ancho del lienzo
     *
     * @return - Int con el ancho del lienzo
     */
    public int getAncho() {
        return this.ancho;
    }

    /**
     * Devuelve el alto del lienzo
     *
     * @return - Int con el alto del lienzo
     */
    public int getAlto() {
        return this.alto;
    }

    /**
     * Permite cambiar el ancho del lienzo
     *
     * @param ancho - El nuevo ancho del lienzo
     */
    public void setAncho(int ancho) {
        this.ancho = ancho;
    }

    /**
     * Permite cambiar el alto del lienzo
     *
     * @param alto - El nuevo ancho del lienzo
     */
    public void setAlto(int alto) {
        this.alto = alto;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup BotonesReproduccion;
    private javax.swing.ButtonGroup barraFormasDibujo;
    private javax.swing.ButtonGroup grupoColores;
    private javax.swing.JButton jAbrir;
    private javax.swing.JMenuItem jActivarCamara;
    protected javax.swing.JToggleButton jAlisar;
    private javax.swing.JMenuItem jArchivoAbrirMenu;
    private javax.swing.JMenuItem jArchivoGuardarMenu;
    private javax.swing.JMenuItem jArchivoNuevo;
    private javax.swing.JToolBar jBarraArchivo;
    private javax.swing.JPanel jBarraArriba;
    private javax.swing.JToolBar jBarraAtributo;
    private javax.swing.JToolBar jBarraAtributos;
    private javax.swing.JToolBar jBarraColores;
    private javax.swing.JLabel jBarraEstado;
    private javax.swing.JToolBar jBarraFormas;
    private javax.swing.JButton jBinariRestar;
    private javax.swing.JButton jBinariSumar;
    private javax.swing.JButton jBorrarRelleno;
    private javax.swing.JButton jBotonCapturar;
    private javax.swing.JSlider jBrillo;
    private javax.swing.JMenuItem jCapturar;
    private javax.swing.JButton jContraste;
    private javax.swing.JLabel jCronometroGrabacion;
    protected javax.swing.JToggleButton jCurva;
    private javax.swing.JMenuItem jDuplicar;
    private javax.swing.JCheckBoxMenuItem jEdiVerBarraEstado;
    protected javax.swing.JToggleButton jEditar;
    private javax.swing.JButton jEscAumentar;
    private javax.swing.JButton jEscDisminuir;
    private javax.swing.JDesktopPane jEscritorio;
    private javax.swing.JComboBox jFiltros;
    private javax.swing.JToggleButton jGrabarAudio;
    protected javax.swing.JSpinner jGrosor;
    private javax.swing.JButton jGuardar;
    private javax.swing.JButton jHistograma;
    private javax.swing.JButton jIluminar;
    protected javax.swing.JLabel jLabeCoordenadaX;
    protected javax.swing.JLabel jLabeCoordenadaY;
    protected javax.swing.JToggleButton jLinea;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenuArchivo;
    private javax.swing.JMenuBar jMenuBar1;
    protected javax.swing.JComboBox jMenuColores;
    private javax.swing.JMenu jMenuEdición;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    protected javax.swing.JComboBox jMenuTrazo;
    private javax.swing.JSlider jMezclaImagenes;
    private javax.swing.JButton jMiFucnion;
    private javax.swing.JMenuItem jNegativo;
    private javax.swing.JButton jNegativo1;
    private javax.swing.JButton jNuevo;
    private javax.swing.JButton jOscurecer;
    protected javax.swing.JToggleButton jOvalo;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelBinarias;
    private javax.swing.JPanel jPanelBrillo;
    private javax.swing.JButton jPanelColores;
    private javax.swing.JPanel jPanelContraste;
    private javax.swing.JPanel jPanelEscala;
    private javax.swing.JPanel jPanelFiltro;
    private javax.swing.JPanel jPanelHerrmientas;
    private javax.swing.JPanel jPanelOperaciones;
    private javax.swing.JPanel jPanelRotacion;
    private javax.swing.JPanel jPanelUmbralizacion;
    protected javax.swing.JPanel jPanelValorGris;
    protected javax.swing.JPanel jPanelValorRGB;
    private javax.swing.JToggleButton jPlayAudio;
    protected javax.swing.JToggleButton jPoligono;
    protected javax.swing.JToggleButton jPoligonoAbierto;
    protected javax.swing.JToggleButton jPunto;
    protected javax.swing.JToggleButton jRectangulo;
    private javax.swing.JMenuItem jRedimensionar;
    private javax.swing.JButton jRellenar;
    private javax.swing.JButton jRellenoDegradados;
    private javax.swing.JButton jRo180;
    private javax.swing.JButton jRo270;
    private javax.swing.JButton jRot90;
    private javax.swing.JSlider jRotación;
    protected javax.swing.JToggleButton jRoundRectangle;
    private javax.swing.JButton jSepia;
    private javax.swing.JButton jSinusoidal;
    private javax.swing.JButton jSobel;
    private javax.swing.JToggleButton jStopAudio;
    private javax.swing.JButton jTintado;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton jTransNivGrises;
    private javax.swing.JButton jTransparencia;
    protected javax.swing.JToggleButton jTrazoLibre;
    private javax.swing.JSlider jUmbralizacion;
    protected javax.swing.JLabel jValorAzul;
    protected javax.swing.JLabel jValorGris;
    protected javax.swing.JLabel jValorRojo;
    protected javax.swing.JLabel jValorVerde;
    private javax.swing.JCheckBoxMenuItem jVerBarraAtributos;
    private javax.swing.JCheckBoxMenuItem jVerBarraFormas;
    // End of variables declaration//GEN-END:variables
}
