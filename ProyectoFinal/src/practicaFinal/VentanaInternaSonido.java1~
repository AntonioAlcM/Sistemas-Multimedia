/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practicaFinal;

import java.io.File;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineListener;
import javax.swing.ImageIcon;
import sm.sound.SMClipPlayer;
import sm.sound.SMPlayer;
import sm.sound.SMSoundRecorder;

/**
 *
 * @author Antonio
 */
public class VentanaInternaSonido extends VentanaInterna {

    SMPlayer player;
    SMSoundRecorder SMRecorder;

    /**
     * Crea un objeto de tipo VentanaInternaSonido, se le pasa como parámetro
     * una archivo
     *
     * @param f - Archivo de tipo File
     */
    public VentanaInternaSonido(File f) {
        initComponents();
        player = new SMClipPlayer(f);
        SMRecorder = new SMSoundRecorder(f);
        SMRecorder.setLineListener(new ManejadorAudio());
        this.jPlayAudio.setIcon(new ImageIcon(getClass().getResource("/iconos/iconosAudio/PlayPressed_48x48.png")));

        this.jStopAudio.setIcon(new ImageIcon(getClass().getResource("/iconos/iconosAudio/StopNormalRed_48x48.png")));

        this.jStopAudio.setSelectedIcon(new ImageIcon(getClass().getResource("/iconos/iconosAudio/StopDisabled_48x48.png")));
        this.jGrabarAudio.setSelectedIcon(new ImageIcon(getClass().getResource("/iconos/iconosAudio/RecordDisabled_48x48.png")));
        ((SMSoundRecorder) SMRecorder).setLineListener(new VentanaInternaSonido.ManejadorAudio());
        jPlayAudio.setSelectedIcon(new ImageIcon(getClass().getResource("/iconos/iconosAudio/PlayDisabled_48x48.png")));
        ((SMClipPlayer) player).setLineListener(new ManejadorAudio());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BotonesReproduccion = new javax.swing.ButtonGroup();
        jPlayAudio = new javax.swing.JToggleButton();
        jStopAudio = new javax.swing.JToggleButton();
        jGrabarAudio = new javax.swing.JToggleButton();

        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        BotonesReproduccion.add(jPlayAudio);
        jPlayAudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iconosAudio/PlayPressed_48x48.png"))); // NOI18N
        jPlayAudio.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iconosAudio/PlayDisabled_48x48.png")));
        jPlayAudio.setMaximumSize(new java.awt.Dimension(48, 48));
        jPlayAudio.setMinimumSize(new java.awt.Dimension(48, 48));
        jPlayAudio.setOpaque(true);
        jPlayAudio.setPreferredSize(new java.awt.Dimension(48, 48));
        jPlayAudio.setRolloverEnabled(false);
        jPlayAudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPlayAudioActionPerformed(evt);
            }
        });

        BotonesReproduccion.add(jStopAudio);
        jStopAudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iconosAudio/StopNormalRed_48x48.png"))); // NOI18N
        jStopAudio.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iconosAudio/StopDisabled_48x48.png")));
        jStopAudio.setSelected(true);
        jStopAudio.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jStopAudio.setPreferredSize(new java.awt.Dimension(48, 48));
        jStopAudio.setRolloverEnabled(false);
        jStopAudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jStopAudioActionPerformed(evt);
            }
        });

        BotonesReproduccion.add(jGrabarAudio);
        jGrabarAudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iconosAudio/RecordPressed_48x48.png"))); // NOI18N
        jGrabarAudio.setMaximumSize(new java.awt.Dimension(48, 48));
        jGrabarAudio.setMinimumSize(new java.awt.Dimension(48, 48));
        jGrabarAudio.setPreferredSize(new java.awt.Dimension(48, 48));
        jGrabarAudio.setRolloverEnabled(false);
        jGrabarAudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jGrabarAudioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPlayAudio, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jStopAudio, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jGrabarAudio, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jGrabarAudio, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                    .addComponent(jStopAudio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPlayAudio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Reproduce un audio
     *
     * @param evt - Evento producido por el ratón
     */
    private void jPlayAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPlayAudioActionPerformed
        if (player != null) {
            player.play();
        }
    }//GEN-LAST:event_jPlayAudioActionPerformed
    /**
     * Para el audio o la grabación
     *
     * @param evt - Evento producido por el ratón
     */
    private void jStopAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jStopAudioActionPerformed
        if (player != null) {
            player.stop();
        }
        if (SMRecorder != null) {
            SMRecorder.stop();
        }
    }//GEN-LAST:event_jStopAudioActionPerformed
    /**
     * Cuando cierras la ventana si el audio o la grabadora estuviera activa se
     * cerraría.
     *
     * @param evt - Evento producido por el ratón
     */
    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        player.stop();
        SMRecorder.stop();
    }//GEN-LAST:event_formInternalFrameClosing
    /**
     * Permite grabar un sonido
     *
     * @param evt - Evento producido por el ratón
     */
    private void jGrabarAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jGrabarAudioActionPerformed
        if (SMRecorder != null) {
            SMRecorder.record();
        }

    }//GEN-LAST:event_jGrabarAudioActionPerformed
    /**
     * Creas un manejador de eventos
     */
    class ManejadorAudio implements LineListener {

        @Override
        public void update(LineEvent event) {
            if (event.getType() == LineEvent.Type.START) {

            }
            if (event.getType() == LineEvent.Type.STOP) {
                jStopAudio.setSelected(true);
                player.stop();
            }
            if (event.getType() == LineEvent.Type.CLOSE) {

            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup BotonesReproduccion;
    private javax.swing.JToggleButton jGrabarAudio;
    private javax.swing.JToggleButton jPlayAudio;
    private javax.swing.JToggleButton jStopAudio;
    // End of variables declaration//GEN-END:variables

}
