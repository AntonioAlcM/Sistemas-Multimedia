/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practicaFinal;

import java.awt.geom.Point2D;
import java.awt.image.WritableRaster;

/**
 *
 * @author Antonio
 */
public class VentanaInternaImagen extends VentanaInterna {

    Paint parent = null;

    /**
     * Crea un objeto de tipo Transparencias, se le pasa como par치metro una
     * ventanaInterna
     *
     * @param parent - Jframe de tipo Paint
     */
    public VentanaInternaImagen(Paint parent) {
        initComponents();
        this.parent = parent;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lienzo2DImagen = new sm.AAM.iu.Lienzo2DImagen();

        FormListener formListener = new FormListener();

        setPreferredSize(new java.awt.Dimension(380, 380));
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(false);
        addInternalFrameListener(formListener);
        getContentPane().setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        lienzo2DImagen.setBackground(new java.awt.Color(204, 204, 204));
        lienzo2DImagen.addMouseMotionListener(formListener);

        javax.swing.GroupLayout lienzo2DImagenLayout = new javax.swing.GroupLayout(lienzo2DImagen);
        lienzo2DImagen.setLayout(lienzo2DImagenLayout);
        lienzo2DImagenLayout.setHorizontalGroup(
            lienzo2DImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        lienzo2DImagenLayout.setVerticalGroup(
            lienzo2DImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        getContentPane().add(lienzo2DImagen);

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.MouseMotionListener, javax.swing.event.InternalFrameListener {
        FormListener() {}
        public void mouseDragged(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == lienzo2DImagen) {
                VentanaInternaImagen.this.lienzo2DImagenMouseDragged(evt);
            }
        }

        public void mouseMoved(java.awt.event.MouseEvent evt) {
            if (evt.getSource() == lienzo2DImagen) {
                VentanaInternaImagen.this.lienzo2DImagenMouseMoved(evt);
            }
        }

        public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            if (evt.getSource() == VentanaInternaImagen.this) {
                VentanaInternaImagen.this.formInternalFrameActivated(evt);
            }
        }

        public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
        }

        public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
        }

        public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
        }

        public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
        }

        public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
        }

        public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
        }
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Cambia los botones de la ventana activa
     *
     * @param evt - Evento producido por el rat칩n
     */
    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
        cambiarEstadoBotones();
    }//GEN-LAST:event_formInternalFrameActivated

    private void lienzo2DImagenMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lienzo2DImagenMouseMoved
        this.parent.jLabeCoordenadaX.setText(Integer.toString(evt.getX()));
        this.parent.jLabeCoordenadaY.setText(Integer.toString(evt.getY()));
        this.imprimirValorColor(evt.getPoint());
    }//GEN-LAST:event_lienzo2DImagenMouseMoved

    /**
     * Mientras tienes pulsado el rat칩n y arrastras actualiza las coordenadas x
     * e y
     *
     * @param evt - Evento producido por el rat칩n
     */
    private void lienzo2DImagenMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lienzo2DImagenMouseDragged
        this.parent.jLabeCoordenadaX.setText(Integer.toString(evt.getX()));
        this.parent.jLabeCoordenadaY.setText(Integer.toString(evt.getY()));
        this.imprimirValorColor(evt.getPoint());
    }//GEN-LAST:event_lienzo2DImagenMouseDragged

    /**
     * Muestra el valor de cada pixel, si la foto es a color muestra el RGB, si
     * es en grises, devuelve el valor en gris
     *
     * @param localizacion - Punto donde deseas ver el valor del pixel.
     */
    public void imprimirValorColor(Point2D localizacion) {
        if (lienzo2DImagen.getImage().getWidth() > localizacion.getX() && lienzo2DImagen.getImage().getHeight() > localizacion.getY()
                && lienzo2DImagen.getImage().getMinX() < localizacion.getX() && lienzo2DImagen.getImage().getMinY() < localizacion.getY()) {
            WritableRaster srcRaster = lienzo2DImagen.getImage(true).getRaster();
            if (srcRaster.getNumBands() >= 3) {
                this.parent.jPanelValorGris.setVisible(false);
                this.parent.jPanelValorRGB.setVisible(true);
                this.parent.jValorRojo.setText(Integer.toString(srcRaster.getSample((int) localizacion.getX(), (int) localizacion.getY(), 0)));
                this.parent.jValorVerde.setText(Integer.toString(srcRaster.getSample((int) localizacion.getX(), (int) localizacion.getY(), 1)));
                this.parent.jValorAzul.setText(Integer.toString(srcRaster.getSample((int) localizacion.getX(), (int) localizacion.getY(), 2)));

            } else {
                this.parent.jPanelValorGris.setVisible(true);
                this.parent.jPanelValorRGB.setVisible(false);
                this.parent.jValorGris.setText(Integer.toString(srcRaster.getSample((int) localizacion.getX(), (int) localizacion.getY(), 0)));
            }
        }
    }

    /**
     * Devuelve el lienzo de la ventana
     *
     * @return Devuelve un Lienzo2DImagen
     */
    public sm.AAM.iu.Lienzo2DImagen getLienzo() {
        return lienzo2DImagen;
    }

    /**
     * Actualiza el estado de los botones
     */
    protected void cambiarEstadoBotones() {
        if (this.parent != null) {
            if (this.lienzo2DImagen.getEditar()) {
                this.parent.jEditar.setSelected(true);
            } else {
                String Forma = lienzo2DImagen.getForma();
                if (Forma == "Punto") {
                    this.parent.jPunto.setSelected(true);
                } else if (Forma == "Linea") {
                    this.parent.jLinea.setSelected(true);
                } else if (Forma == "Rectangulo") {
                    this.parent.jRectangulo.setSelected(true);
                } else if (Forma == "Elipse") {
                    this.parent.jOvalo.setSelected(true);
                } else if (Forma == "Curva") {
                    this.parent.jCurva.setSelected(true);
                } else if (Forma == "Poligono") {
                    this.parent.jPoligono.setSelected(true);
                } else if (Forma == "RectanguloRedondeado") {
                    this.parent.jRoundRectangle.setSelected(true);
                } else if (Forma == "PoligonoAbiero") {
                    this.parent.jPoligonoAbierto.setSelected(true);
                }
            }
            this.parent.jMenuTrazo.setSelectedIndex(this.lienzo2DImagen.getTrazo());
            this.parent.jGrosor.getModel().setValue(this.lienzo2DImagen.getGrosor());
            this.parent.jMenuColores.setSelectedItem(this.lienzo2DImagen.getColor());
            this.parent.jAlisar.setSelected(this.lienzo2DImagen.estaAlisado());
            this.parent.repaint();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private sm.AAM.iu.Lienzo2DImagen lienzo2DImagen;
    // End of variables declaration//GEN-END:variables
}
