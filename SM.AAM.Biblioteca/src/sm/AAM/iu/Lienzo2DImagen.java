/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sm.AAM.iu;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;
import sm.AAM.graficos.Rectangulo;

/**
 * Esta clase define objetos que contienen un bufferedImage
 *
 * @author Antonio
 */
public class Lienzo2DImagen extends sm.AAM.iu.Lienzo2D {

    private BufferedImage img;
    private Rectangulo rectangulo;

    /**
     * Creates new form Lienzo2DImagen
     */
    public Lienzo2DImagen() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 320, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 322, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Método encargado de establecer una imagen en un lienzo
     *
     * @param img - BufferedImage que se desea poner en el lienzo
     */
    public void setImage(BufferedImage img) {
        this.img = img;
        Point2D puntoInicio = new Point2D.Double(0, 0);
        Point2D puntoFinal = new Point2D.Double(img.getWidth(), img.getHeight());
        if (img != null) {
            this.setPreferredSize(new Dimension(img.getWidth(), img.getHeight()));
        }
        rectangulo = new Rectangulo(puntoInicio, puntoFinal);
        super.setImagen(rectangulo);
    }

    /**
     * Método que devuelve la imagen del lienzo
     *
     * @return devuelve un BufferedImage
     */
    public BufferedImage getImage() {
        return this.img;
    }

    /**
     * Método que devuelve la imagen del lienzo
     *
     * @param drawVector - Booleamo que señala si la imagen tiene graphics o no
     * @return devuelve un BufferedImage, si drawVector es true devuelve una
     * nueva imagen con los graphics almacenadoes en el lienzo, si es false
     * devuelve la imagen que hubiera en el lienzo
     */
    public BufferedImage getImage(boolean drawVector) {
        if (drawVector) {
            BufferedImage imagen = new BufferedImage(this.img.getWidth(), this.img.getHeight(), this.img.getType());
            this.paint(imagen.createGraphics());
            return imagen;
        } else {
            return getImage();
        }
    }

    /**
     * Redimensiona la imagen, creando una nueva imagen con el tamaño deseado
     * Una vez creada se graba la imagen antigua en la imagen nueva, en el caso
     * de que la imagen nueva sea mas grande, la imagen se ensanchará hasta
     * ocupar todo el espacio, en caso de que sea menor la imagen será achicada
     * para que entre en el espacio
     *
     * @param ancho - ancho de la nueva imagen
     * @param alto - alto de la nueva imagen
     */
    public void redimensionar(int ancho, int alto) {
        BufferedImage imagen = new BufferedImage(ancho, alto, img.getType());
        Graphics2D createGraphics = imagen.createGraphics();
        createGraphics.setColor(Color.white);
        createGraphics.fillRect(0, 0, imagen.getWidth(), imagen.getHeight());
        createGraphics.drawImage(img, 0, 0, this);
        this.setImage(imagen);
    }

    /**
     * Reescala la imagen, creando una nueva imagen con el tamaño deseado Una
     * vez creada se graba la imagen antigua en la imagen nueva, en el caso de
     * que la imagen nueva sea mas grande, se ampliará la imagen hasta abarcar
     * todo el tamaño, en caso de que sea menor la imagen se reducirá.
     *
     * @param ancho - ancho de la nueva imagen
     * @param alto - alto de la nueva imagen
     */
    public void reescalar(int ancho, int alto) {
        Graphics2D createGraphics;
        BufferedImage imagen = new BufferedImage(ancho, alto, img.getType());
        createGraphics = imagen.createGraphics();
        createGraphics.drawImage(img, 0, 0, imagen.getWidth(), imagen.getHeight(), this);
        this.setImage(imagen);
    }

    /**
     * Pinta la imagen en el lienzo
     *
     * @param g - Graphics de la imagen
     */
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (this.img != null) {
            g.drawImage(this.img, 0, 0, this);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
